<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>桂糊涂的博客</title>
  
  <subtitle>代码杂记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://guileen.github.io/"/>
  <updated>2021-04-22T06:24:01.135Z</updated>
  <id>http://guileen.github.io/</id>
  
  <author>
    <name>桂糊涂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c10m单机千万连接问题及解决方案</title>
    <link href="http://guileen.github.io/2021/04/22/c10m-problem-and-solution/"/>
    <id>http://guileen.github.io/2021/04/22/c10m-problem-and-solution/</id>
    <published>2021-04-22T06:24:01.000Z</published>
    <updated>2021-04-22T06:24:01.135Z</updated>
    
    <content type="html"><![CDATA[<p>C10m是继c10k问题之后提出的新问题，指单机1000万连接问题。40gbps网卡、32核、256G内存，这样的配置理论上已经可以处理千万并发连接了。但虽然硬件已经能够满足条件了，但是软件系统依然是复杂的。这就是C10M问题。</p><p>使用Go语言开发的TCP server，可以比较轻松的保持1000万的连接。大约消耗56G内存，用于连接对象和goroutine，不包含业务对象。但仅仅保持空闲连接并不够，最重要的是拥有更高的包处理速度（Packet per second），和更低的时延。</p><p>Robert Graham的演讲<a href="https://www.cs.dartmouth.edu/~sergey/cs258/2013/C10M-Defending-the-Internet-at-Scale-Dartmouth-2013.pdf">《C10M Defending The Internet At Scale》(pdf)</a> <a href="https://www.youtube.com/watch?v=D09jdbS6oSI">(youtube)</a>回答了C10M的问题原因：内核不是解决方案，而是问题本身。因为内核处理数据包是经过了一个复杂的过程。对于C10m的定义如下：</p><ul><li>千万并发连接</li><li>每秒百万连接接入</li><li>每秒千万数据包</li><li>10gb/s</li><li>10微秒延迟</li><li>10微秒抖动</li><li>10核CPU并行</li></ul><p>其中最核心的指标，是前3项。而面临的挑战主要是<strong>用户态协议栈和多核并发问题</strong>。用户态协议栈可以在网关类、云原生等应用中发挥极大的价值，但是对于业务层的开发并不友好。用户态协议栈的技术有SDP、BPF、DPDK等。我们需要<strong>重点关注的是多核并发情况下的网络编程问题</strong>。</p><h2 id="为什么多核编程是复杂的？"><a href="#为什么多核编程是复杂的？" class="headerlink" title="为什么多核编程是复杂的？"></a>为什么多核编程是复杂的？</h2><p>大多数的程序在高于4核的CPU上不能发挥更好的性能，有时甚至会降低性能。其中主要的影响因素是CPU的缓存流水线。L1 cache 4个cycle（cpu时钟），L2 cache 12个cycle，L3 30 cycles，内存 300 cycles。如果命中L1、L2缓存，性能则是很高的，若缓存miss性能则会降低。在高并发的情况下，我们最好是保证程序是绑定在某个CPU上执行的。</p><p><img src="/Users/admin/work/guileen.github.com/hexo/source/img/c10m/cpu-cache.png" alt="img"></p><p>在千万并发情况下，因为上下文的切换过于频繁，缓存miss的情况将大大增加。在上下文切换时，如果同一个连接的处理线程不是绑定在同一个CPU上的，那么将进一步加剧缓存miss的情况。</p><p>除缓存miss情况外，cacheline还存在一种<strong>伪共享</strong>的问题，会造成性能的下降。当从内存中取单元到cache中时，会一次取一个cacheline大小的内存区域到cache中，然后存进相应的cacheline中, 所以当你读取一个变量的时候，可能会把它相邻的变量也读取到CPU的缓存中(如果正好在一个cacheline中)，因为有很大的几率你回继续访问相邻的变量，这样CPU利用缓存就可以加速对内存的访问。这本来是一种优化策略，避免加载相邻变量时多次访问内存。但是在多核并发的情况下，则可能造成性能下降。</p><p><img src="https://segmentfault.com/img/bVcNCKX/view" alt="preview"></p><p>当两个CPU操作两个相邻的变量时，这段相同的数据被加载到内存中。这将产生数据竞争，为了保证一致性，性能必然会下降。</p><p><img src="https://segmentfault.com/img/bVcNCLf/view" alt="preview"></p><p>因此，<strong>保持CPU亲和性</strong>，就成为了C10M中需要重点关注的问题。其中端口复用、prefork、taskset这些技术比较值得尝试。我将这些资料都整理在了 <a href="github.com/guileen/c10m-test">guileen/c10m-test</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C10m是继c10k问题之后提出的新问题，指单机1000万连接问题。40gbps网卡、32核、256G内存，这样的配置理论上已经可以处理千万并发连接了。但虽然硬件已经能够满足条件了，但是软件系统依然是复杂的。这就是C10M问题。&lt;/p&gt;
&lt;p&gt;使用Go语言开发的TCP se
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>推荐系统架构</title>
    <link href="http://guileen.github.io/2021/04/09/recommend-system-architecture/"/>
    <id>http://guileen.github.io/2021/04/09/recommend-system-architecture/</id>
    <published>2021-04-09T14:13:09.000Z</published>
    <updated>2021-04-09T14:13:09.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-架构目标"><a href="#0x00-架构目标" class="headerlink" title="0x00 架构目标"></a>0x00 架构目标</h2><p>推荐系统的目标简而言之是从全量Item（商品、内容、人）中为用户找到一个最符合业务价值的一部分有序子集。这个最有价值，通常要综合考虑用户的兴趣以及平台的商业模式。比如对于视频网站而言，用户的观看时长是最能代表这个价值的，而影评网站则要推荐用户评分最高的那些影片。</p><p>我们关心的问题是推荐效果和算法复杂度。</p><h2 id="0x01-架构设计"><a href="#0x01-架构设计" class="headerlink" title="0x01 架构设计"></a>0x01 架构设计</h2><p>按数据来划分可分为：大数据平台 =&gt; 召回层 =&gt; 排序层 =&gt; 融合层。总数据量，亿级，召回层千级、万级，排序层百级，融合层十级。</p><p>按计算来划分可分为：离线层=&gt; 近线层 =&gt; 在线层</p><p><img src="/img/recsys/netflix.jpeg" alt=""></p><p><a href="https://www.cnblogs.com/shengyang17/p/11546299.html">https://www.cnblogs.com/shengyang17/p/11546299.html</a></p><h2 id="0x02-召回层算法"><a href="#0x02-召回层算法" class="headerlink" title="0x02 召回层算法"></a>0x02 召回层算法</h2><p>召回算法通常采用多种模型，尽可能多的召回物品。主要采用简单高效的算法，也包含一些简单的策略如热门物品、新发布物品等。协同过滤模型不适用用户和物品的特征数据，只使用用户行为数据。</p><h3 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h3><p>经典的协同过滤算法，泛化能力不足，已不再流行。现在更多的是采用矩阵分解方法，将评分矩阵分解为用户矩阵和物品矩阵的叉乘，相当于有一个K维的隐含特征，用户与物品在这个K维特征上相契合，则会有很高的推荐度。优化目标是最小化评分矩阵与预测矩阵的距离。</p><p><img src="/img/recsys/mf.png" alt=""></p><p><a href="https://antkillerfarm.github.io/ml/2016/12/29/Machine_Learning_16.html">ALS算法</a> 一个离线的可以并行的算法，但缺点是无法增量更新。<a href="https://asset-pdf.scinapse.io/prod/30495595/30495595.pdf">Fast incremental matrix factorization forrecommendation with positive-only feedback</a> 这篇论文介绍了一种使用 ISGD 算法进行矩阵分解的增量更新算法。</p><p><img src="/img/recsys/ISGD.png" alt=""></p><p>这个算法仅考虑了正样本，其中的 $ err_(ui)=1-A_uB_i^T $ 可以改进为 $ err_(ui)=R_(ui)-A_uB_i^T $。采用这个算法可以使我们的模型增量更新。</p><h2 id="0x03-排序层算法"><a href="#0x03-排序层算法" class="headerlink" title="0x03 排序层算法"></a>0x03 排序层算法</h2><p>在矩阵分解中，我们没有使用用户和物品的特征，这无疑是对信息的浪费。在排序层中，我们将问题转化为一个2分类问题，即 P(y=1|X)，用户喜欢一个物品的概率。其中X为 {用户特征、物品特征、场景特征}。这里有大量的机器学习方法可以使用，常用的有 LR（线性回归），FM/FFM（隐向量特征交叉），GBDT+LR（其中GBDT完成了特征工程部分，LR完成了回归部分）。</p><p>深度学习在这一层也有越来越多的应用，Embedding技术主要使用在特征工程的阶段。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-架构目标&quot;&gt;&lt;a href=&quot;#0x00-架构目标&quot; class=&quot;headerlink&quot; title=&quot;0x00 架构目标&quot;&gt;&lt;/a&gt;0x00 架构目标&lt;/h2&gt;&lt;p&gt;推荐系统的目标简而言之是从全量Item（商品、内容、人）中为用户找到一个最符合业务价
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="http://guileen.github.io/2021/03/11/distributed-transaction/"/>
    <id>http://guileen.github.io/2021/03/11/distributed-transaction/</id>
    <published>2021-03-11T13:24:22.000Z</published>
    <updated>2021-03-11T13:27:19.285Z</updated>
    
    <content type="html"><![CDATA[<p>微服务架构中，分布式事务、全链路跟踪、监控报警、限流降级、灰度发布、服务网关等等都很重要，大多是比较简单的工程性问题，有成熟的解决方案。其中在理论上比较复杂的，主要就是分布式事务了。</p><h2 id="异步场景的分布式事务"><a href="#异步场景的分布式事务" class="headerlink" title="异步场景的分布式事务"></a>异步场景的分布式事务</h2><p>主服务完成事务后将结果用事件（消息队列）通知从服务。从服务消费完成事务后，将事件删除（否则将持续收到事件通知）。这一模式的主要问题是，消息队列与主事务如何保持一致。解决方案是主事务中增加一个本地Msg表，事件投递成功后，删除本地Msg。若事件投递失败，由消息补偿定时任务将未投递消息写入消息服务。</p><p>目前看来是比较完美的，但是这一方案对主业务有很大的侵入性。因此可以考虑将Msg持久化独立为一个服务。在开始主事务前，先将Msg置为Prepare状态，然后主事务完成后，Commit Msg。如果Prepare Msg失败，则主事务不会开始，如果Msg Prepare失败，但没有Commit Msg，则Msg服务会向主服务回调检测任务是否完成。RocketMQ实现了类似的机制。这一模式的主要缺点是需要写一个回调检查方法。这种方法也被成为<strong>半投递</strong>。</p><p><img src="/img/dtx/half-message.jpg" alt=""></p><h2 id="同步场景分布式事务"><a href="#同步场景分布式事务" class="headerlink" title="同步场景分布式事务"></a>同步场景分布式事务</h2><h3 id="二阶段提交协议（2-Phase-Commit）（XA）"><a href="#二阶段提交协议（2-Phase-Commit）（XA）" class="headerlink" title="二阶段提交协议（2 Phase Commit）（XA）"></a>二阶段提交协议（2 Phase Commit）（XA）</h3><p><img src="/img/dtx/2pc.png" alt=""></p><p>2PC协议中，用户与协调者通信。事务的执行分为准备阶段和提交阶段。在准备阶段，完成资源的锁定。协调者收到所有的投票都为Yes后，通知所有参与者提交事务，否则通知参与者取消事务。为了完成事务，需要实现以下几个接口</p><ul><li>[参与者]canCommit(trans) -&gt; Yes/No  协调者询问参与者能否开始任务。参与者若返回yes，需要锁定相关资源。</li><li>[参与者]doCommit(trans)  协调者通知参与者执行他的事务。</li><li>[参与者]doAbort(trans) 协调者通知参与者放弃事务。</li><li>[协调者]haveCommitted(trans) 参与者调用协调者的该接口，通知协调者，自己已经完成了任务。</li><li>[协调者]getDecision(trans) 参与者投Yes后一段时间未收到通知，参与者主动询问表决结果，主动恢复事务。</li></ul><p>我们必须要考虑超时的情况：</p><ul><li>每一个网络动作都要包含一个超时的动作，超时并不意味失败。</li><li>当协调者调用canCommit超时时，事务将不会开始，协调者将向所有参与者发送doAbort。</li><li>当参与者在canCommit返回了No之后，参与者终止事务（没有超时）</li><li>当参与者在canCommit返回了Yes之后超时，我们称其进入了不确定状态，参与者需要调用getDecision来决定下一步的动作。如果协调者发生故障，需要继续检测getDecision，等待协调者恢复后则可恢复事务。（可能持续的等待）</li></ul><p>我们还需要考虑到进程崩溃的情况：</p><ul><li>当参与者回复了Yes之后崩溃，后继服务需要从数据库中恢复该事务。因此参与者在回复Yes之前必须将事务状态写入数据库。</li><li>当协调者崩溃后，需要正确的处理getDecision</li></ul><p>缺点：</p><ul><li>在一切正常的情况下，2PC的性能是2N次请求。但如果出现了异常，则可能出现长时间的等待，并锁定了相关资源。3PC用来解决这样的问题。</li></ul><h3 id="三阶段提交协议（3-Phase-Commit）"><a href="#三阶段提交协议（3-Phase-Commit）" class="headerlink" title="三阶段提交协议（3 Phase Commit）"></a>三阶段提交协议（3 Phase Commit）</h3><p><img src="/img/dtx/3pc.png" alt=""></p><p>3PC与2PC的异同：</p><ul><li>3PC将2PC的准备阶段拆分为『询问』和『准备』两个阶段。</li><li>在询问阶段，参与者不锁定资源，只返回是否可以执行。这一步避免了2PC最终表决为No却锁定了资源的情况。</li><li>当询问所有参与者都可以执行的情况下，才要求参与者进行准备，锁定资源。</li><li>询问、准备必须都成功，才会执行Commit，否则执行Abort。这与2PC是类似的。</li></ul><h3 id="TCC协议"><a href="#TCC协议" class="headerlink" title="TCC协议"></a>TCC协议</h3><p>TCC本质上依然是2PC，他们的区别是TCC是服务级别的，而2PC是资源级别的（也可以是服务级别的）。在2PC、3PC中，都会对资源进行长时间的占用，同一时间只能有一个事务执行，有一个锁竞争的问题。为了解决这个问题，TCC在Try阶段，就将事务所需的资源进行预留，后续的锁只发生在预留的资源上。</p><p><img src="/img/dtx/tcc.png" alt=""></p><p>为了解释这个问题，我们先来想象这样一种场景，用户在电商网站购买商品1000元，使用余额支付800元，使用红包支付200元。我们看一下在 2PC 中的流程：</p><p>Prepare 阶段：</p><ul><li>下单系统插入一条订单记录，不提交</li><li>余额系统减 800 元，给记录加锁，写 redo 和 undo 日志，不提交</li><li>红包系统减 200 元，给记录加锁，写 redo 和 undo 日志，不提交</li></ul><p>Commit 阶段：</p><ul><li>下单系统提交订单记录</li><li>余额系统提交，释放锁</li><li>红包系统提交，释放锁</li></ul><p>我们在事务执行过程中，锁定了整个用户账户。而TCC 在该场景中的流程：</p><p>Try操作</p><ul><li>tryX 下单系统创建待支付订单</li><li>tryY 冻结账户红包 200 元</li><li>tryZ 冻结资金账户 800 元</li></ul><p>Confirm操作</p><ul><li>confirmX 订单更新为支付成功</li><li>confirmY 扣减账户红包 200 元</li><li>confirmZ 扣减资金账户 800 元</li></ul><p>Cancel操作</p><ul><li>cancelX 订单处理异常，资金红包退回，订单支付失败</li><li>cancelY 冻结红包失败，账户余额退回，订单支付失败</li><li>cancelZ 冻结余额失败，账户红包退回，订单支付失败</li></ul><p>我们只对参与事务的部分资源进行了锁定，因此极大的降低了锁竞争的情况，也就提升了系统的性能。缺点是，TCC的实现对业务的侵入性较强，必须由开发人员来编写。而2PC、3PC则可以抽象为统一的框架。</p><h2 id="AT-模式"><a href="#AT-模式" class="headerlink" title="AT 模式"></a>AT 模式</h2><p>本地关系型数据库   [Seata AT模式]<a href="http://seata.io/zh-cn/docs/dev/mode/at-mode.html">http://seata.io/zh-cn/docs/dev/mode/at-mode.html</a></p><p>两阶段提交协议的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><p>TODO</p><h2 id="SAGA"><a href="#SAGA" class="headerlink" title="SAGA"></a>SAGA</h2><p>长事务解决方案，订机票的例子</p><p>TODO</p><p><a href="https://huzb.me/2019/06/30/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E2%80%94%E2%80%942PC%E3%80%813PC%E5%92%8CTCC/#%E4%BA%94%E3%80%81TCC-%E5%8D%8F%E8%AE%AE">[1]分布式事务——2PC、3PC 和 TCC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;微服务架构中，分布式事务、全链路跟踪、监控报警、限流降级、灰度发布、服务网关等等都很重要，大多是比较简单的工程性问题，有成熟的解决方案。其中在理论上比较复杂的，主要就是分布式事务了。&lt;/p&gt;
&lt;h2 id=&quot;异步场景的分布式事务&quot;&gt;&lt;a href=&quot;#异步场景的分布式事务&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为什么『太极』是一门好语言？</title>
    <link href="http://guileen.github.io/2021/02/23/why-taichi-is-good/"/>
    <id>http://guileen.github.io/2021/02/23/why-taichi-is-good/</id>
    <published>2021-02-23T14:08:00.000Z</published>
    <updated>2021-02-23T14:08:00.828Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/taichi-dev/taichi">太极</a> 是由MIT的中国小伙胡渊鸣开发的一门编程语言。这不仅仅是又一个新的编程语言，我实在已经厌倦了不断有人造新的语言，来满足每个作者不同的语言怪癖。有许多的编程语言是没有存在的价值的，他们继续存在往往只是因为遗留历史项目还在维护。而『太极』是有开创性和工程价值的。</p><p>我认为太极有以下几个关键的<strong>有价值</strong>的特性：</p><ol><li>跨平台的GPU加速支持。同时支持CUDA、OpenGL、Metal，在Windows、Linux、MacOSX上都能很好的运行。我此前发现大部分的深度学习框架的GPU加速都是基于CUDA，这意味着我的macbook的GPU无法发挥作用。</li><li>性能卓越，比PyTorch快13.4倍、Tensorflow要快188倍<a href="https://www.qbitai.com/2020/01/10534.html">[1]</a>。这两点都有着实实在在的经济价值。</li><li>简洁易学。作者并没有想要特地标新立异，而是基于python的语法来开发，与python完全兼容。这是非常务实的，但并非没有追求的，代码是会被静态编译执行的，性能与C++代码并没有太多差别。</li></ol><p>我认为太极在以下领域会有很好的应用：</p><ol><li>学术研究。</li><li>机器学习、图形学、物理引擎、游戏编程的教学和实验。</li><li>工具开发。可能作为最终产品的打包发布仍要探索，但制作工具是效率极高的。</li><li>深度学习、离线渲染等离线任务的工程级应用。</li></ol><p>对于一名仍在不断学习的中老年人而言，我不希望仅仅是学会一两个重复的工具，而是能够更高效的去实践、探索未知的世界。与其学习tensorflow这种集成式的深度学习框架，不如用太极自己实现一个，这样我们才能更深刻的理解其中的过程。我们还可以用太极将数据可视化的展示出来。</p><p>学习API是非常无趣的，但对于每一个学习编程的孩子来说，却是一道很高的门槛。很多人都无法实现在屏幕上绘制一个像素，这使我们哪怕拥有了足够的知识，依然缺乏表现力。有了太极，就仿佛打开了一道科研的大门。在科研过程中，我们需要的是快速实验、快速试错。太极就是为此而生的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/taichi-dev/taichi&quot;&gt;太极&lt;/a&gt; 是由MIT的中国小伙胡渊鸣开发的一门编程语言。这不仅仅是又一个新的编程语言，我实在已经厌倦了不断有人造新的语言，来满足每个作者不同的语言怪癖。有许多的编程语言是没有存
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计一个3D游戏引擎</title>
    <link href="http://guileen.github.io/2021/02/20/design-a-3d-game-engine/"/>
    <id>http://guileen.github.io/2021/02/20/design-a-3d-game-engine/</id>
    <published>2021-02-20T13:22:04.000Z</published>
    <updated>2021-02-23T13:25:59.617Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了一些计算机图形学的知识，重新点燃了自己想要学习游戏开发的热情。但是，计算机图形学与游戏开发还是有很大区别的。计算机图形学关心的是如何高质量的还原真实世界的视觉效果，而游戏开发则要求一个可编程性更强的系统。因此游戏引擎，首先是为开发服务的。</p><p>游戏引擎，应该允许游戏开发者，轻松的定义实体，操控这些实体的位置、模型、滤镜，最终通过渲染引擎渲染到屏幕上。甚至要提供一些易用的图形化制作工具，比如关卡编辑器，地图编辑器，实体编辑器，脚本语言，配置表，这些输出成数据文件。这些数据将被加载到内存，通过渲染引擎输出到屏幕。</p><p><strong>[制作工具]</strong>–&gt;静态数据–&gt;<strong>[用户输入处理、AI update、物理引擎]</strong>–&gt;动态数据–&gt;<strong>[渲染引擎]</strong>–&gt;最终画面。</p><p>游戏引擎=制作工具+程序API+渲染引擎。</p><p>而游戏引擎的关键，就在于处理数据。</p><p>哪怕一个最简单的<a href="https://github.com/louis-gui/louis-gui.github.io/blob/main/likeasnakegame.cpp">终端贪食蛇游戏</a>(这是我11岁的儿子写的)也需要符合这个标准。这个终端游戏制作工具不需要，他的素材是一些终端字符，google担任了这个制作工具的角色。程序API更新贪食蛇的动态数据，然后渲染引擎将动态数据映射成特定的终端字符打印在屏幕上。</p><p>开发一个3D游戏，数据结构更加复杂一些。理清了这个结构之后，3D游戏可能比2D游戏更容易开发一些，因为3D数据结构毕竟更接近真实世界。我们将整个待渲染的世界，称为【场景】，场景中摆放着各种【模型】。对于物理引擎部分，只需要模型的数据就可以了，而对于渲染引擎，则还需要【光源】和【摄像机】。</p><h2 id="物理引擎"><a href="#物理引擎" class="headerlink" title="物理引擎"></a>物理引擎</h2><p>一个粒子由*位置position、速度velocity、质量mass、力force（加速度acceleration）、阻尼damping（简化一个物体在一个环境中的摩擦力如0.999）等属性，还需要考虑地心引力gravity的影响。</p><p>用反质量invertMass模拟无限质量？</p><p><em>位置更新公式：</em>$$ p’=p+dot p t + 1/2 ddot p t^2 $$ 其中，$dot p$表示速度，$ddot p$表示加速度。在30fps时，t=0.033 后一项可以忽略。简化为 $$ p’=p+dot p t$$</p><p><em>速度更新公式:</em> $$ dot p’ = dot p d^t + ddot p t $$  d为阻尼，</p><p>以上模拟对于慢速物体没有问题，但对于子弹、炮弹这种高速物体则不适用，因为可能在一帧之内子弹已穿过物体，无法与目标发生碰撞。因此对于这种情况，我们则需要将子弹想象为一个激光（或抛物线）。对于目标所受到的冲击，则需要通过动量守恒、能量守恒公式进行计算（TODO）。</p><p>重力是恒定的，但还有很多其他的力是动态生成的，爆炸、发射、风。因此我们要创造一个『力生成器』在每一帧执行它的updateForce方法，来设定物体受到的外力。</p><p><strong>弹簧</strong>是一种普遍的模型，那些柔软的材质都可以抽象为大量的弹簧。根据胡克定理$$f=-k Delta l$$，我们可以写一个弹簧力生成器。</p><p>除了弹簧系统外，还有一类硬约束是紧密连接的对象，比如铁链、四肢。他们的关键在于连接点的速度是一致的。</p><p>然后我们要将所有的东西整合到一起成为一个物理引擎，在每一帧updatePhysics()</p><p>我们要将物理引擎从点升级到体，刚体的碰撞盒与他的质点。刚体的旋转。</p><p>碰撞检测（TODO）</p><p>参考：</p><p>《Game Physics Engine Development》2nd Edition by Ian Millington</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近学习了一些计算机图形学的知识，重新点燃了自己想要学习游戏开发的热情。但是，计算机图形学与游戏开发还是有很大区别的。计算机图形学关心的是如何高质量的还原真实世界的视觉效果，而游戏开发则要求一个可编程性更强的系统。因此游戏引擎，首先是为开发服务的。&lt;/p&gt;
&lt;p&gt;游戏引擎，
      
    
    </summary>
    
    
      <category term="OpenGL,Game development" scheme="http://guileen.github.io/tags/OpenGL-Game-development/"/>
    
  </entry>
  
  <entry>
    <title>BRDF双向反射分布函数</title>
    <link href="http://guileen.github.io/2021/02/18/brdf-pbr/"/>
    <id>http://guileen.github.io/2021/02/18/brdf-pbr/</id>
    <published>2021-02-18T13:12:37.000Z</published>
    <updated>2021-02-18T13:12:37.862Z</updated>
    
    <content type="html"><![CDATA[<p>双向反射分布函数（bidirectional reflectance distribution function）$f_r(omega_i,omega_r)$是一个计算光照反射量的函数。$omega_i$表示输入光角度，$omega_r$表示反射光角度，函数返回反射光辐射率。$omega$由球面坐标系的$phi$,$theta$角度表示，因此brdf函数共有4个参数。brdf的单位是每立体角$sr^(-1)$。</p><img src="/img/brdf/spherical-coordinates.png" style="width:50%;" /><img src="/img/brdf/solid-angle-1sr.png" style="width:45%;margin-top:5%;" /><h3 id="辐射度量学-Radiometry"><a href="#辐射度量学-Radiometry" class="headerlink" title="辐射度量学(Radiometry)"></a>辐射度量学(Radiometry)</h3><table><thead><tr><th>物理量</th><th>符号</th><th>公式</th><th>国际单位制</th><th>单位符号</th><th>注释</th></tr></thead><tbody><tr><td><a href="https://zh.wikipedia.org/wiki/辐射能">辐射能</a>（Radiant energy）</td><td>$Q_e$</td><td></td><td><a href="https://zh.wikipedia.org/wiki/焦耳">焦耳</a></td><td>$J$</td><td>能量。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/辐射通量">辐射通量</a>（Radiant flux）</td><td>$Phi_e$</td><td>$Phi=(dQ)/(dt)$</td><td><a href="https://zh.wikipedia.org/wiki/瓦特">瓦特</a></td><td>$W$</td><td>每单位时间的辐射能量，亦作“辐射功率”。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/辐射强度">辐射强度</a>（Radiant intensity）</td><td>$I_e$</td><td>$I=(dPhi)/(d omega)</td><td><a href="https://zh.wikipedia.org/wiki/瓦特">瓦特</a>每<a href="https://zh.wikipedia.org/wiki/球面度">球面度</a></td><td>$W*sr^(-1)$</td><td>每单位<a href="https://zh.wikipedia.org/wiki/立體角">立体角</a>的辐射通量。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/輻照度">辐照度</a>（Irradiance）（辉度）</td><td>$E_e$</td><td>$E=(dPhi)/(dA)=int_(Omega)  L(omega)cos theta d omega$</td><td><a href="https://zh.wikipedia.org/wiki/瓦特">瓦特</a>每平方米</td><td>$W*m^(-2)$</td><td>入射表面的辐射通量</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/辐射率">辐射率</a>（Radiance）(光亮度）</td><td>$L_e$</td><td>$(d^2Phi)/(dAcos theta d omega)$</td><td><a href="https://zh.wikipedia.org/wiki/瓦特">瓦特</a>每<a href="https://zh.wikipedia.org/wiki/球面度">球面度</a>每平方米</td><td>$W*sr^(-1)*m^(-2)$</td><td>每单位<a href="https://zh.wikipedia.org/wiki/立體角">立体角</a>每单位投射表面的<a href="https://zh.wikipedia.org/wiki/辐射通量">辐射通量</a>。<strong>相当于辐射强度在dA上的微分</strong></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>BRDF由Fred Nicodemus在1965年提出，函数如下：</p><p>$$f_r(omega_i,omega_r) = (dL_r(omega_r))/(dE_i(omega_i)) = (dL_r(omega_r))/(L_i(omega_i)cos theta_i d omega_i) $$</p><img src="/Users/admin/work/guileen.github.com/hexo/source/img/brdf/brdf-diagram.png" style="width:50%;" /><p>这个公式之所以定义为辐射率（radiance）和辐照度（irradiance）之比，而不是radiance和radiance之比，或irradiance和irradiance之比。是因为当考虑入射时，我们需要考虑入射光在面积上的分量，所以irradiance译为辐<strong>照</strong>度。当考虑反射时，我们需要考虑每立体角的辐射通量，并且这个辐射通量最终投影在屏幕（视网膜）面积上的辐射通量，因此我们用辐射率。如果我们用点光源，入射光的计算似乎也是可以用辐射率的，但有时我们还要考虑平行光的情况，那么对于入射光就不存在每立体角的概念了，因此对于入射光照我们用辐照度，反射我们用辐射率。</p><h3 id="基于物理的BRDF模型-PBR，Physically-based-rendering"><a href="#基于物理的BRDF模型-PBR，Physically-based-rendering" class="headerlink" title="基于物理的BRDF模型(PBR，Physically-based rendering)"></a>基于物理的BRDF模型(PBR，Physically-based rendering)</h3><h4 id="次表面散射（Subsurface-scattering）"><a href="#次表面散射（Subsurface-scattering）" class="headerlink" title="次表面散射（Subsurface scattering）"></a>次表面散射（Subsurface scattering）</h4><p>是一些半透明物质比如皮肤、玉石、大理石、塑料等。当光入射到材料表面后，一部分被反射、一部分被吸收、还有一部分经历透射，透射光在材料内部进行多次不规则的反射之后，又从不同角度反射了回来。</p><h4 id="菲涅尔反射（Fresnel-Reflectance）"><a href="#菲涅尔反射（Fresnel-Reflectance）" class="headerlink" title="菲涅尔反射（Fresnel Reflectance）"></a>菲涅尔反射（Fresnel Reflectance）</h4><p>当光从一种折射率为$n_1$的介质向另一种折射率为$n_2$的介质传播时，在两者的交界处可能会同时发生光的反射和折射。<a href="https://zh.wikipedia.org/wiki/%E8%8F%B2%E6%B6%85%E8%80%B3%E6%96%B9%E7%A8%8B">菲涅尔方程</a>描述了光波的不同分量被折射和反射的情况，也描述了波反射时的相变。光线会随着我们的观察角度而反射不同的亮度，当我们以垂直与水面的角度观察池塘时，我们可以看到池塘的底部，但当我们以平行于水面的角度观察水面时，反射光则会很强我们无法看到池底。</p><h4 id="微表面理论（Microfacet-Theory）"><a href="#微表面理论（Microfacet-Theory）" class="headerlink" title="微表面理论（Microfacet Theory）"></a>微表面理论（Microfacet Theory）</h4><p>微表面理论假设材质的表面是由不同方向的微小细节平面（microfacet）所构成，反射光线由这些微表面的法线分布决定。我们用法线分布函数（Normal Distribution Function，NDF），D(h) 来描述表面的法线分布概率。h表示视角与入射光角度之间的半程向量。</p><p><img src="/img/brdf/microfacet.jpg" alt=""></p><p>$$f(i,o) = (F(i,h)G(i,o,h)D(h))/(4(n,i)(n,o))$$ </p><p>其中F(i,h)表示菲涅尔项，表示所有反射的比例。G(i,o,h) 表示自投影项，当光线几乎平射于微表面时，光线则将被粗糙的表面自我遮挡掉。D(h)表示法线分布。</p><p>参考:</p><p><a href="https://en.wikipedia.org/wiki/Bidirectional_reflectance_distribution_function">Wikipedia:《Bidirectional reflectance distribution function》</a></p><p>《Real-Time Rendering, 4th edition》</p><p><a href="https://github.com/QianMo/Real-Time-Rendering-3rd-CN-Summary-Ebook">《Real-Time Rendering 3rd》提炼总结</a></p><p><a href="https://zhuanlan.zhihu.com/p/20119162"> Microfacet材质和多层材质——文刀秋二</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;双向反射分布函数（bidirectional reflectance distribution function）$f_r(omega_i,omega_r)$是一个计算光照反射量的函数。$omega_i$表示输入光角度，$omega_r$表示反射光角度，函数返回反射光辐射率
      
    
    </summary>
    
    
      <category term="computer-graphics" scheme="http://guileen.github.io/tags/computer-graphics/"/>
    
  </entry>
  
  <entry>
    <title>线性代数的本质</title>
    <link href="http://guileen.github.io/2021/02/13/the-essence-of-linear-algebra/"/>
    <id>http://guileen.github.io/2021/02/13/the-essence-of-linear-algebra/</id>
    <published>2021-02-13T04:03:51.000Z</published>
    <updated>2021-02-23T13:26:07.469Z</updated>
    
    <content type="html"><![CDATA[<p>当我在大学中学习线性代数的时候，我不知所云且不以为然。然后随着不断的学习，我发现不懂线性代数是没法在更深的技术领域里混的。比如机器学习、计算机图形学等等，对于其他的科研领域也都是同样的。如果学不好线性代数既不是我的问题，也不是线性代数的问题，那到底是什么问题？最近学些了<a href="https://www.bilibili.com/video/BV1X7411F744">现代计算机图形学入门-闫令琪</a> <a href="https://www.bilibili.com/video/BV1ib411t7YR">线性代数的本质-3blue1brown</a> 这两个系列视频使我对线性代数多了更多的感性认识，而<a href="https://www.marxists.org/chinese/maozedong/marxist.org-chinese-mao-193707.htm">《实践论》</a> 告诉我们，<strong>理性认识是要依赖于感性认识的</strong>。传统的线性代数教材则希望构建一套完全自洽的纯粹的数学理论，它不依赖于现实世界的知识。这或许可以满足一些数学家的成就感，但这种马后炮式的“创造”是脱离历史的。线性代数就像其他的学科一样，不可能是仅凭想象产生的，虽然数学家可以伪装成不依赖历史发展而独立自洽，但这除了是一种智力游戏外，对于认识世界、传播知识并没有任何帮助。我们就在这种缺乏感性认识的数学教育中丧失了对数学理论的兴趣，岂不哀哉？</p><p>吐槽结束，进入正题。谈谈我此刻对线性代数的理解，探讨一下他的本质到底是什么。我们是否会问自己，加减乘除的本质到底是什么？我们之所以不这么问，是因为我们已经理解了四则运算的本质。我们不会问关于十进制的本质，因为日常生活中已经给我们建立了足够多的经验。但我们在学龄前的阶段，我们则可能对十进制和加减乘除充满了困惑。但我们接触线性代数太晚，我们并没有足够的练习和日常应用使我们建立起感性认识。当我们在商店里消费的时候四则运算不断强化着我们的认知，但线性代数缺少这样的机会。当我们被教授四则运算时，老师把我们当作一个普通的人类，会告诉我们3个苹果+2个苹果=5个苹果，这种现实世界的例子帮助我们更好的理解了四则运算。但当我们学习线性代数时，我们则变成了一个个抽象的理性机器，这个系统只告诉我们各种定义、运算规则，然后要求我们像计算机一样的运行，计算出结果。What are we doing？我们怎么可能不懵圈呢？线性代数就是一个增强版的加减乘除，但没有足够的案例使我们不知道我们的计算究竟代表着什么？AlphaGo就算赢了李世石，但他不知道自己在干什么。我们作为人类的尊严在哪里？我又没控制好自己的情绪，让我们回到正题。《线性代数及其应用》是一本很好的教材，他和国内教材最大的区别就在于“应用”上，这本书中列举了大量的例子来说明线性代数的应用。这本书的开头说道“<strong>线性代数是一门语言，必须用学习外语的方法每天学习这种语言</strong>”。</p><h3 id="鸡兔同笼与线性变换"><a href="#鸡兔同笼与线性变换" class="headerlink" title="鸡兔同笼与线性变换"></a>鸡兔同笼与线性变换</h3><p>我们从鸡兔同笼来举个例子。鸡兔同笼是小学阶段的奥数题，也就是在小学的数学语言中，这是一道很难描述的题。到了中学阶段我们可以用未知数x表示鸡的数量，未知数y表示兔的数量，并列出方程。而对于线性代数的语言，我们用向量$$((a),(b))$$表示鸡和兔的数量，如果我们有非常多的未知数，我们不希望定义太多的未知数符号，我们直接用$$x$$表示这个n维变量。我们有一个变换矩阵$$[[1,1],[2,4]]$$ 表示鸡有1个头2只脚，兔有1个头4只脚 。如果有3只鸡5只兔则 $$[[1,1],[2,4]]*[[3],[5]]=[[3*1+5*1],[3*2+5*4]]=[[8],[26]]$$，它代表着我们将一个“鸡兔向量”映射到了“头脚向量”的空间中，共有8只头，26只脚。</p><p>我们知道函数是一种映射，$$f(x)=y$$代表将$x$到$y$的映射关系。矩阵乘法叫做线性变换，线性变换是一种函数映射，但函数映射不一定是线性变化。因此线性变换是符合函数的性质的。如果函数是可逆的，则有$$x=f^(-1)(y)$$，同样的，对于矩阵而言，$$若A是可逆的，且Ax=b，则x=A^(-1)b。设A=[[a,b],[c,d]]，则A^(-1)=1/(ad-bc)[[d,-b],[-c,a]]$$。</p><p>对于鸡兔同笼问题，$$A=[[1,1],[2,4]]，则A^(-1)=1/2[[4,-1],[-2,1]]$$。$$当有8头26脚时，x=1/2[[4,-1],[-2,1]]*[[8],[26]]=1/2[[4*8-26],[-2*8+26]]=1/2[[6],[10]]=[[3],[5]]$$，即3只鸡5只兔。最重要的是，这整个计算过程，计算机可以轻松的完成，并且可以用定义标准化的操作，因为操作标准化，计算机可以被设计的更加擅长处理这类操作。这就是线性代数得到广泛应用的一个最重要原因。</p><p>线性变换可能进行多次，就像映射可以进行多次一样。因为矩阵的乘法就是一种特殊的函数，函数满足结合律$$g(f(h(x)))=((g @ f)(h(x)))$$，所以矩阵乘法也符合结合律$$A(BC)=(AB)C$$。多次映射之后是一个新的映射，多次变换之后也是一个新的变换，所以我们可以将这些变换矩阵预先乘好，以增加每次计算的效率。也可以将一个复杂变换拆解为多个简单变换，使我们能更好的理解其性质。</p><p>我们可以从鸡兔变换到头脚，我们也可以从产量变换到成本收益（这是经济学的应用），我们也可以从速度变换到阻力（这是空气动力学的应用），我们也可以将3D空间变换到3D或2D空间（这是计算机图形学的应用），我们也可以将用户行为维度变换到兴趣标签维度（这是机器学习推荐系统的应用）。这都说明了线性代数是一门“语言”，是一个工具。并不是因为线性代数，所以这些定理存在，而是因为这些规律本身存在，才能有线性代数这门工具。人类是巧妙的“发明”了线性代数，而不是“发现”了线性代数。线性代数这门语言可以使我们避免基本代数语言的变量名爆炸。人类日常语言中有你我他这那等代词，中文有甲乙丙丁这种天干地支可以用作代词，英文则有a,b,cd可以使用。日常的代词使用是随意的，很多时候是不严谨的。代数学的代词在使用前则需要对它进行准确的定义。而线性代数则将最常使用的一些操作提取了出来，使我们免于重复的定义大量性质类似的代词。在线性代数中，鸡兔数量，头脚数量与空间中点的xyz轴位置都是同一种性质的。研究飞机表面的气流的过程包含了反复求解大型的线性方程组$$Ax=b$$，涉及的变量个数达到2百万个。可以说线性代数的发展完全是随着其应用发展的，如果有一本按照历史发展顺序描述线性代数的书，一定可以达到很好的教学效果。</p><h3 id="行列式（determinant）"><a href="#行列式（determinant）" class="headerlink" title="行列式（determinant）"></a>行列式（determinant）</h3><p>行列式的出现是远早于矩阵的。Determinant是决定的意思，（下文称之为决定值，“行列式”翻译的无味，既没有描述其决定性质，也没有说明其结果是特定的值）：决定值是否不为0决定了一个线性方程组是否有唯一解。所谓线性方程组，就是一次方程组。这个结论最早见于《九章算术》（有一种观点认为很多思想是在明朝由中国传至欧洲，而清朝恰好是中国的一个倒退，而欧洲则顺势伪造了一套其文明独立发展的历史叙事，这里不展开描述了）。决定值的这个性质在欧洲由莱布尼茨最早提出（莱布尼茨在中学西传中扮演着重要角色）。高斯首先使用了determinant这个词，他在数论理论中大量用到了决定值。后来这个词就更多的指一个特殊的函数，即某个表达式，因此中文将其翻译为行列式。</p><p>观察我们在鸡兔同笼中得出的结论：$$设A=[[a,b],[c,d]]，则A^(-1)=1/(ad-bc)[[d,-b],[-c,a]]$$。因此矩阵A当且仅当$$ad-bc!=0$$时存在逆矩阵，我们记为$$det(A)=|A|=|[a,b],[c,d]|=ad-bc$$。我们继续推广研究$3xx3$矩阵，可以得到：</p><p>$$|[a,b,c],[d,e,f],[h,i,j]|=a|[e,f],[h,i]|-b|[d,f],[g,i]|+c|[d,e],[g,h]|=aei+bfg+cdh-ceg-bdi-afh=|[a,d,h],[b,e,i],[c,f,j]|$$</p><p>对$4xx4$矩阵则有：</p><p>$$|[a,b,c,d],[e,f,g,h],[i,j,k,l],[m,n,o,p]|=a|[f,g,h],[j,k,l],[n,o,p]|-b|[e,g,h],[i,k,l],[m,o,p]|+c|[e,f,h],[i,j,l],[m,n,p]|-d|[e,f,g],[i,j,k],[m,n,o]|$$</p><p>依此类推，决定值的公式是一个递归。决定值的几何意义代表代表$1xx1$矩阵变换后的平行四边形的面积，或者说是矩阵变换后面积的放大倍数，即变换矩阵围成的四边形的面积。简单的证明如下图：$S=(a+c)(b+d)-ab-cd-2bc=ad-bc$。推广到3维则表示变换矩阵的围成的立方体的体积。</p><img src="/img/math/transform-determinant-opt.png" style="width:45%;" /><img src="/img/math/determinant-area.gif" style="width:45%;" /><p>如果determinant=0，则说明变换之后由面变为了线，或由体变为了面。而线或面无法再变换回面或体。我们同样以鸡兔同笼问题来举例，我们把题目中的兔换成鸭，则变换矩阵为$$A=[[1,1],[2,2]], det(A)=0$$。这个方程组是没有唯一解的，因为无论鸡鸭的比例如何，头脚的比例都是$1:2$。对于这样的矩阵，我们称他的秩为1，秩代表矩阵的维数。一个二维矩阵，可能秩为1，一个三维矩阵可能秩为2也就是一个面，也可能秩为1也就是一条线，甚至秩为0。</p><p>TODO 叉乘表示面积和垂直与平面的向量，特征值与特征向量，表示空间中在线性变换中保持稳定的轴，最小二乘法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我在大学中学习线性代数的时候，我不知所云且不以为然。然后随着不断的学习，我发现不懂线性代数是没法在更深的技术领域里混的。比如机器学习、计算机图形学等等，对于其他的科研领域也都是同样的。如果学不好线性代数既不是我的问题，也不是线性代数的问题，那到底是什么问题？最近学些了&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从余弦定理到冯氏光照模型</title>
    <link href="http://guileen.github.io/2021/02/07/law-of-cosines-and-phong-reflection-model/"/>
    <id>http://guileen.github.io/2021/02/07/law-of-cosines-and-phong-reflection-model/</id>
    <published>2021-02-06T17:01:33.000Z</published>
    <updated>2021-02-18T03:59:48.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-勾股定理——宇宙的密码"><a href="#1-勾股定理——宇宙的密码" class="headerlink" title="1.勾股定理——宇宙的密码"></a>1.勾股定理——宇宙的密码</h3><p>$a^2+b^2=c^2$。下图是勾股定理的一个直观证明。</p><p><img src="/img/math/ggdl.png" alt=""></p><h3 id="2-余弦定理，角与边的关系"><a href="#2-余弦定理，角与边的关系" class="headerlink" title="2. 余弦定理，角与边的关系"></a>2. 余弦定理，角与边的关系</h3><img src="/img/math/q-cosine.svg.png" width="30%"><img src="/img/math/cosine-1.png" width="30%"> <img src="/img/math/cos-sin.png" width="30%"><p>三条边可以确定一个三角形，已知三角形的三条边长，如何求出其角度呢？</p><p>由$cos,sin$定义可知<br>  $$ c = a * cos beta + b * cos alpha $$<br>  两边同乘c得：<br>$$ c^2 = ac * cos beta + bc * cos alpha $$<br>  同理可得：<br>$$ a^2 = ac cos beta + ab * cos gamma $$<br>$$ b^2 = bc cos alpha + ab cos gamma $$<br>  故：$$ a^2+b^2-c^2 = 2abcosgamma $$<br>  可得：$$ c^2 = a^2 + b^2 - 2ab cos gamma $$<br></p><h3 id="3-向量的定义（方向）"><a href="#3-向量的定义（方向）" class="headerlink" title="3. 向量的定义（方向）"></a>3. 向量的定义（方向）</h3><img src="/img/math/vector_subtraction.svg.png" width="45%"><img src="/img/math/vector_addition.svg.png" width="45%"><p>$$令 vec c = vec a - vec b$$, $$theta$$为$$vec a$$ $$vec b$$ 的夹角。余弦定理可以用向量形式写成 $$ | vec c |^2 = |vec a|^2 + |vec b|^2 -  2 |vec a| |vec b| cos theta $$ </p><h3 id="4-点积（dot-product）的代数定义"><a href="#4-点积（dot-product）的代数定义" class="headerlink" title="4. 点积（dot product）的代数定义"></a>4. 点积（dot product）的代数定义</h3><p>两个向量的点积是一个标量。向量$$vec a=[a_1, a_2, … a_n]$$与向量$$vec b=[b_1, b_2, … b_n]$$的点积定义为: $$ vec a * vec b = sum_(i=1)^n a_i b_i = a_1 b_1 + a_2 b_2 + … a_n b_n $$。</p><p>点积有以下性质（证略）：</p><ol><li>满足交换律 $$vec a * vec b = vec b * vec a$$</li><li>满足分配律 $$vec a * (vec b + vec c) = vec a * vec b + vec a * vec c$$</li><li>乘以标量时满足 $$ (c_1 vec a) * (c_2 vec b) = (c_1 c_2)(vec a * vec b)$$</li><li>不满足结合律。因为标量 $$ vec a * vec b $$ 与向量 $$ vec c $$ 的点积没有定义，所以$$(vec a * vec b) * vec c=vec a * (vec b * vec c)$$ 没有意义。</li></ol><p>点积的代数定义简单实用，易于表示，也易于使用计算机程序处理。是线性代数的基本操作之一。</p><h3 id="5-点积的几何意义"><a href="#5-点积的几何意义" class="headerlink" title="5. 点积的几何意义"></a>5. 点积的几何意义</h3><p>对于任何一个n维向量有 $|vec a|^2=a_1^2+a_2^2+…+a_n^2$。根据勾股定理，这是很显然的。换个角度<strong>说如果没有勾股定理，这一步就不存在，后面的内容也不存在了。而勾股定理不是由代数方法证明的，而是独立于代数系统之外的空间基本性质。而空间和时间是宇宙最根本的本质。这就是勾股定理最神奇的地方</strong>。</p><p>我们根据点积的定义可知：$$ vec a * vec a = a_1 * a_1 + a_2 * a_2 + … a_n * a_n = |vec a|^2$$ 即 $$ vec a * vec a == |vec a|^2$$</p><p>我们根据余弦定理的向量表示可得：$$ vec c * vec c = vec a * vec a + vec b * vec b - 2 |vec a| |vec b| cos theta . (1)$$ </p><p>根据向量的定义 $$ vec c = vec a - vec b $$ 有 $$ vec c * vec c = (vec a - vec b) * (vec a - vec b) = vec a * vec a + vec b * vec b - 2 vec a * vec b . (2)$$</p><p>结合等式$$(1)$$、$$(2)$$有 $$vec a * vec b = |vec a| |vec b| cos theta$$。一个看似简单的代数点积操作，竟然和夹角余弦相关，真是不可思议。</p><p>点积的几何意义是什么呢？关键就在这个$cos theta$，如果$$|vec b|$$为1时候，我们可以将$$vec a * vec b$$视为$$vec a $$在$$vec b$$方向上的投影长度。</p><p><img src="/img/math/dot_product_1.png" width="45%"> <img src="/img/math/dot_product_2.png" width="45%"></p><h3 id="6-点积的物理意义（从数学到宇宙）"><a href="#6-点积的物理意义（从数学到宇宙）" class="headerlink" title="6. 点积的物理意义（从数学到宇宙）"></a>6. 点积的物理意义（从数学到宇宙）</h3><p>点积的物理意义就是向量在某方向上的投影长度。这在物理上可以表达力在某方向上的投影，光在某方向的投影，速度、加速度在某方向的投影。而点积的操作，可以使我们只需要关心这些物理量的向量表示，而不需要去关心夹角，不需要去计算三角函数。而在统计学、机器学习等方面，余弦可以表示两个向量之间的相似性，比如两个词向量，两个用户的兴趣向量等，应用非常广泛。下面就以计算机图形学举例来说明点积的应用。</p><p>冯氏光照模型将一个物体的光照分解为环境光+漫反射光+镜面反射光。</p><p><img src="/img/math/Phong_components_version_4.png" alt=""></p><p>环境光比较简单就是一个常量。而漫反射光，则为光照强度在平面的法线方向的投影，与法线方向一致则光照最强。镜面反射光则为反射光方向在视角方向上的投影，与视角完全一致，则反射光最强。</p><p><img src="/img/math/diffuse_light.png" width="45%"> <img src="/img/math/specular_light.png" width="45%"></p><p>OpenGL的shader大致如下：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">vec3</span> CalcDirLight(DirLight light, <span class="type">vec3</span> normal, <span class="type">vec3</span> viewDir) &#123;</span><br><span class="line">    <span class="comment">// normalize 归一化，使法线向量的长度为1</span></span><br><span class="line">    <span class="type">vec3</span> lightDir = <span class="built_in">normalize</span>(-light.direction);</span><br><span class="line">    <span class="comment">// 漫反射光. dot 计算cos* 强度， max把负值最多降到0，表示全黑。</span></span><br><span class="line">    <span class="type">float</span> diff = <span class="built_in">max</span>(<span class="built_in">dot</span>(normal, lightDir), <span class="number">0.0</span>);</span><br><span class="line">    <span class="type">vec3</span> reflectDir = <span class="built_in">reflect</span>(-lightDir, normal);</span><br><span class="line">    <span class="comment">// dot 计算反射光在视角上的cos分量，至少为0。使用pow，模拟镜面光焦点分布集中度，shininess越高要求反射分量越接近于1</span></span><br><span class="line">    <span class="comment">// 反射分量==1 表示必须视角恰巧与反射角完全一致才能看到反射光，也就是绝对镜面</span></span><br><span class="line">    <span class="type">float</span> spec = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(viewDir, reflectDir), <span class="number">0.0</span>), material.shininess);</span><br><span class="line">    <span class="comment">// 合并冯氏光照结果</span></span><br><span class="line">    <span class="type">vec3</span> ambient = light.ambient * <span class="type">vec3</span>(<span class="built_in">texture</span>(material.diffuse, TexCoords));</span><br><span class="line">    <span class="type">vec3</span> diffuse = light.diffuse * diff * <span class="type">vec3</span>(<span class="built_in">texture</span>(material.diffuse, TexCoords));</span><br><span class="line">    <span class="type">vec3</span> specular = light.specular * spec * <span class="type">vec3</span>(<span class="built_in">texture</span>(material.specular, TexCoords));</span><br><span class="line">    <span class="keyword">return</span> (ambient + diffuse + specular);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-勾股定理——宇宙的密码&quot;&gt;&lt;a href=&quot;#1-勾股定理——宇宙的密码&quot; class=&quot;headerlink&quot; title=&quot;1.勾股定理——宇宙的密码&quot;&gt;&lt;/a&gt;1.勾股定理——宇宙的密码&lt;/h3&gt;&lt;p&gt;$a^2+b^2=c^2$。下图是勾股定理的一个直观
      
    
    </summary>
    
    
      <category term="OpenGL,math" scheme="http://guileen.github.io/tags/OpenGL-math/"/>
    
  </entry>
  
  <entry>
    <title>学习CMake</title>
    <link href="http://guileen.github.io/2021/01/11/learn-cmake/"/>
    <id>http://guileen.github.io/2021/01/11/learn-cmake/</id>
    <published>2021-01-11T12:56:32.000Z</published>
    <updated>2021-01-11T14:07:41.861Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hsf-training.github.io/hsf-training-cmake-webpage/" target="_blank" rel="noopener">https://hsf-training.github.io/hsf-training-cmake-webpage/</a></p><h2 id="1-构建"><a href="#1-构建" class="headerlink" title="1. 构建"></a>1. 构建</h2><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/CLIUtils/CLI11.git</span><br><span class="line">cd CLI11</span><br><span class="line">cmake -S . -B build</span><br><span class="line">cmake --build build</span><br><span class="line">cmake --build build --target test</span><br></pre></td></tr></table></figure><h3 id="另一种构建"><a href="#另一种构建" class="headerlink" title="另一种构建"></a>另一种构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">make test</span><br></pre></td></tr></table></figure><p><strong>永远不要</strong>在源码目录直接 <code>cmake .</code> 这样会污染源码目录。</p><h3 id="选择编译器"><a href="#选择编译器" class="headerlink" title="选择编译器"></a>选择编译器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CC=clang CXX=clang++ cmake -S . -B build</span><br></pre></td></tr></table></figure><h3 id="设置选项-D-列出选项-L"><a href="#设置选项-D-列出选项-L" class="headerlink" title="设置选项 -D 列出选项 -L"></a>设置选项 <code>-D</code> 列出选项 <code>-L</code></h3><ul><li><a href="https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html" target="_blank" rel="noopener"><code>CMAKE_BUILD_TYPE</code></a>:  <code>Release</code>, <code>RelWithDebInfo</code>, <code>Debug</code>, 或其他编译选项。</li><li><a href="https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html" target="_blank" rel="noopener"><code>CMAKE_INSTALL_PREFIX</code></a>: 安装位置，Unix上默认是 <code>/usr/local</code> , 用户安装目录常是 <code>~/.local</code> </li><li><a href="https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html" target="_blank" rel="noopener"><code>BUILD_SHARED_LIBS</code></a>:  <code>ON</code> or <code>OFF</code> </li><li><a href="https://cmake.org/cmake/help/latest/module/CTest.html" target="_blank" rel="noopener"><code>BUILD_TESTING</code></a>: </li></ul><h3 id="调试Cmake-files-在source目录执行下面的命令："><a href="#调试Cmake-files-在source目录执行下面的命令：" class="headerlink" title="调试Cmake files 在source目录执行下面的命令："></a>调试Cmake files 在source目录执行下面的命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake build --trace-source="CMakeLists.txt"</span><br></pre></td></tr></table></figure><h2 id="2-编写-CMakeLists-txt"><a href="#2-编写-CMakeLists-txt" class="headerlink" title="2. 编写 CMakeLists.txt"></a>2. 编写 CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.14</span>)</span><br><span class="line"><span class="comment"># 项目名称，未设置LANGUAGES的话，则是 C, CXX 的混合项目</span></span><br><span class="line"><span class="keyword">project</span>(MyProject)</span><br><span class="line"><span class="comment"># 至少一个 add_executeable 或 add_library 来作为target。</span></span><br><span class="line"><span class="keyword">add_executable</span>(myexample simple.cpp)</span><br></pre></td></tr></table></figure><p>可以设置更多信息</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最小。。最大版本</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.14</span>...<span class="number">3.18</span>)</span><br><span class="line"><span class="comment"># 更详细的项目信息</span></span><br><span class="line"><span class="keyword">project</span>(MyProject</span><br><span class="line">  VERSION</span><br><span class="line">    <span class="number">1.0</span></span><br><span class="line">  DESCRIPTION</span><br><span class="line">    <span class="string">"Very nice project"</span></span><br><span class="line">  LANGUAGES</span><br><span class="line">    CXX</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可添加 STATIC, SHARED, or MODULE; 默认通过 BUILD_SHARED_LIBS 选择.</span></span><br><span class="line"><span class="keyword">add_library</span>(mylibrary simplelib.cpp)</span><br></pre></td></tr></table></figure><h3 id="Target可用的设置"><a href="#Target可用的设置" class="headerlink" title="Target可用的设置"></a>Target可用的设置</h3><ul><li><a href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html" target="_blank" rel="noopener"><code>target_link_libraries</code></a>: Other targets; can also pass library names directly</li><li><a href="https://cmake.org/cmake/help/latest/command/target_include_directories.html" target="_blank" rel="noopener"><code>target_include_directories</code></a>: Include directories</li><li><a href="https://cmake.org/cmake/help/latest/command/target_compile_features.html" target="_blank" rel="noopener"><code>target_compile_features</code></a>: The compiler features you need activated, like <code>cxx_std_11</code></li><li><a href="https://cmake.org/cmake/help/latest/command/target_compile_definitions.html" target="_blank" rel="noopener"><code>target_compile_definitions</code></a>: Definitions</li><li><a href="https://cmake.org/cmake/help/latest/command/target_compile_options.html" target="_blank" rel="noopener"><code>target_compile_options</code></a>: More general compile flags</li><li><a href="https://cmake.org/cmake/help/latest/command/target_link_directories.html" target="_blank" rel="noopener"><code>target_link_directories</code></a>: Don’t use, give full paths instead (CMake 3.13+)</li><li><a href="https://cmake.org/cmake/help/latest/command/target_link_options.html" target="_blank" rel="noopener"><code>target_link_options</code></a>: General link flags (CMake 3.13+)</li><li><a href="https://cmake.org/cmake/help/latest/command/target_sources.html" target="_blank" rel="noopener"><code>target_sources</code></a>: Add source files</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不需要添加任何source，导出一个 header-only library。</span></span><br><span class="line"><span class="keyword">add_library</span>(some_header_only_lib INTERFACE)</span><br></pre></td></tr></table></figure><h4 id="什么是-INTERFACE-IMPORETED？？"><a href="#什么是-INTERFACE-IMPORETED？？" class="headerlink" title="什么是 INTERFACE IMPORETED？？"></a>什么是 INTERFACE IMPORETED？？</h4><h3 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cache.cmake</span></span><br><span class="line"><span class="comment"># 设置变量</span></span><br><span class="line"><span class="keyword">set</span>(MY_VARIABLE <span class="string">"I am a variable"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"$&#123;MY_VARIABLE&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(MY_CACHE_VAR <span class="string">"I am a cached variable"</span> CACHE <span class="keyword">STRING</span> <span class="string">"Description"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"$&#123;MY_CACHE_VAR&#125;"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -DMY_CACHE_VAR="command line" -P cache.cmake</span><br></pre></td></tr></table></figure><p>Try setting a cached variable using <code>-DMY_VARIABLE=something</code> <em>before</em> the <code>-P</code>. Which variable is shown?</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">option</span>(MY_OPTION <span class="string">"On or off"</span> <span class="keyword">OFF</span>)</span><br><span class="line"><span class="comment"># $ENV&#123;name&#125;</span></span><br><span class="line"><span class="comment"># if(DEFINED ENV&#123;name&#125;)  </span></span><br><span class="line"><span class="keyword">file</span>(GLOB OUTPUT_VAR *.cxx)</span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE  OUTPU_VAR *.cxx)</span><br></pre></td></tr></table></figure><h2 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3. 项目结构"></a>3. 项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">code&#x2F;03-structure&#x2F;</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── README.md</span><br><span class="line">├── apps</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── app.cpp</span><br><span class="line">├── cmake</span><br><span class="line">│   └── FindSomeLib.cmake</span><br><span class="line">├── docs</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── mainpage.md</span><br><span class="line">├── include</span><br><span class="line">│   └── modern</span><br><span class="line">│       └── lib.hpp</span><br><span class="line">├── src</span><br><span class="line">│   ├── CMakeLists.txt</span><br><span class="line">│   └── lib.cpp</span><br><span class="line">└── tests</span><br><span class="line">    ├── CMakeLists.txt</span><br><span class="line">    └── testlib.cpp</span><br></pre></td></tr></table></figure><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="/CMakeLists.txt"></a>/CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Works with 3.14 and tested through 3.18</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.14</span>...<span class="number">3.18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Project name and a few useful settings. Other commands can pick up the results</span></span><br><span class="line"><span class="keyword">project</span>(</span><br><span class="line">  ModernCMakeExample</span><br><span class="line">  VERSION <span class="number">0.1</span></span><br><span class="line">  DESCRIPTION <span class="string">"An example project with CMake"</span></span><br><span class="line">  LANGUAGES CXX)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅在主项目中运行，若是子项目中 add_subdirectory 则忽略</span></span><br><span class="line"><span class="keyword">if</span>(CMAKE_PROJECT_NAME <span class="keyword">STREQUAL</span> PROJECT_NAME)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Optionally set things like CMAKE_CXX_STANDARD,</span></span><br><span class="line">  <span class="comment"># CMAKE_POSITION_INDEPENDENT_CODE here</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Let's ensure -std=c++xx instead of -std=g++xx</span></span><br><span class="line">  <span class="keyword">set</span>(CMAKE_CXX_EXTENSIONS <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Let's nicely support folders in IDE's</span></span><br><span class="line">  <span class="keyword">set_property</span>(GLOBAL PROPERTY USE_FOLDERS <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Testing only available if this is the main app. Note this needs to be done</span></span><br><span class="line">  <span class="comment"># in the main CMakeLists since it calls enable_testing, which must be in the</span></span><br><span class="line">  <span class="comment"># main CMakeLists.</span></span><br><span class="line">  <span class="keyword">include</span>(CTest)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Docs only available if this is the main app</span></span><br><span class="line">  <span class="keyword">find_package</span>(Doxygen)</span><br><span class="line">  <span class="keyword">if</span>(Doxygen_FOUND)</span><br><span class="line">    <span class="keyword">add_subdirectory</span>(docs)</span><br><span class="line">  <span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">"Doxygen not found, not building docs"</span>)</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># FetchContent added in CMake 3.11, downloads during the configure step</span></span><br><span class="line"><span class="comment"># FetchContent_MakeAvailable was not added until CMake 3.14</span></span><br><span class="line"><span class="keyword">include</span>(FetchContent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Accumulator library This is header only, so could be replaced with git</span></span><br><span class="line"><span class="comment"># submodules or FetchContent</span></span><br><span class="line"><span class="keyword">find_package</span>(Boost REQUIRED)</span><br><span class="line"><span class="comment"># Adds Boost::boost / Boost::headers (newer FindBoost / BoostConfig 3.15 name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Formatting library, adds fmt::fmt</span></span><br><span class="line">FetchContent_Declare(</span><br><span class="line">  fmtlib</span><br><span class="line">  GIT_REPOSITORY https://github.com/fmtlib/fmt.git</span><br><span class="line">  GIT_TAG <span class="number">7.0</span>.<span class="number">2</span>)</span><br><span class="line">FetchContent_MakeAvailable(fmtlib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The compiled library code is here</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The executable code is here</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(apps)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Testing only available if this is the main app</span></span><br><span class="line"><span class="keyword">if</span>(BUILD_TESTING)</span><br><span class="line">  <span class="keyword">add_subdirectory</span>(tests)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><h3 id="src-CMakeLists-txt"><a href="#src-CMakeLists-txt" class="headerlink" title="/src/CMakeLists.txt"></a>/src/CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note that headers are optional, and do not affect add_library, but they will</span></span><br><span class="line"><span class="comment"># not show up in IDEs unless they are listed in add_library.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optionally glob, but only for CMake 3.12 or later: file(GLOB HEADER_LIST</span></span><br><span class="line"><span class="comment"># CONFIGURE_DEPENDS "$&#123;ModernCMakeExample_SOURCE_DIR&#125;/include/modern/*.hpp")</span></span><br><span class="line"><span class="keyword">set</span>(HEADER_LIST <span class="string">"$&#123;ModernCMakeExample_SOURCE_DIR&#125;/include/modern/lib.hpp"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make an automatic library - will be static or dynamic based on user setting</span></span><br><span class="line"><span class="keyword">add_library</span>(modern_library lib.cpp <span class="variable">$&#123;HEADER_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We need this directory, and users of our library will need it too</span></span><br><span class="line"><span class="keyword">target_include_directories</span>(modern_library PUBLIC ../<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This depends on (header only) boost</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(modern_library PRIVATE Boost::boost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># All users of this library will need at least C++11</span></span><br><span class="line"><span class="keyword">target_compile_features</span>(modern_library PUBLIC cxx_std_11)</span><br><span class="line"></span><br><span class="line"><span class="comment"># IDEs should put the headers in a nice place</span></span><br><span class="line"><span class="keyword">source_group</span>(</span><br><span class="line">  TREE <span class="string">"$&#123;PROJECT_SOURCE_DIR&#125;/include"</span></span><br><span class="line">  PREFIX <span class="string">"Header Files"</span></span><br><span class="line">  FILES <span class="variable">$&#123;HEADER_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><h3 id="apps-CMakeLists-txt"><a href="#apps-CMakeLists-txt" class="headerlink" title="/apps/CMakeLists.txt"></a>/apps/CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(app app.cpp)</span><br><span class="line"><span class="keyword">target_compile_features</span>(app PRIVATE cxx_std_17)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app PRIVATE modern_library fmt::fmt)</span><br></pre></td></tr></table></figure><h3 id="docs-CMakeLists-txt"><a href="#docs-CMakeLists-txt" class="headerlink" title="/docs/CMakeLists.txt"></a>/docs/CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">set</span>(DOXYGEN_EXTRACT_ALL YES)</span><br><span class="line"><span class="keyword">set</span>(DOXYGEN_BUILTIN_STL_SUPPORT YES)</span><br><span class="line"></span><br><span class="line">doxygen_add_docs(docs modern/lib.hpp <span class="string">"$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/mainpage.md"</span></span><br><span class="line">                 WORKING_DIRECTORY <span class="string">"$&#123;PROJECT_SOURCE_DIR&#125;/include"</span>)</span><br></pre></td></tr></table></figure><h3 id="tests-CMakeLists-txt"><a href="#tests-CMakeLists-txt" class="headerlink" title="/tests/CMakeLists.txt"></a>/tests/CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Testing library</span></span><br><span class="line">FetchContent_Declare(</span><br><span class="line">  catch2</span><br><span class="line">  GIT_REPOSITORY https://github.com/catchorg/Catch2.git</span><br><span class="line">  GIT_TAG v2.<span class="number">9.1</span>)</span><br><span class="line">FetchContent_MakeAvailable(catch2)</span><br><span class="line"><span class="comment"># Adds Catch2::Catch2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tests need to be added as executables first</span></span><br><span class="line"><span class="keyword">add_executable</span>(testlib testlib.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># I'm using C++17 in the test</span></span><br><span class="line"><span class="keyword">target_compile_features</span>(testlib PRIVATE cxx_std_17)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Should be linked to the main library, as well as the Catch2 testing library</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(testlib PRIVATE modern_library Catch2::Catch2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you register a test, then ctest and make test will run it. You can also run</span></span><br><span class="line"><span class="comment"># examples and check the output, as well.</span></span><br><span class="line"><span class="keyword">add_test</span>(NAME testlibtest <span class="keyword">COMMAND</span> testlib) <span class="comment"># Command can be a target</span></span><br></pre></td></tr></table></figure><p><a href="https://hsf-training.github.io/hsf-training-cmake-webpage/" target="_blank" rel="noopener">更多内容</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://hsf-training.github.io/hsf-training-cmake-webpage/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hsf-training.github.io/hsf-tr
      
    
    </summary>
    
    
      <category term="cpp" scheme="http://guileen.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++构建工具比较</title>
    <link href="http://guileen.github.io/2021/01/08/cpp-build-systems/"/>
    <id>http://guileen.github.io/2021/01/08/cpp-build-systems/</id>
    <published>2021-01-08T08:26:33.000Z</published>
    <updated>2021-01-26T12:43:02.847Z</updated>
    
    <content type="html"><![CDATA[<p>近日，又对C++产生了兴趣。</p><p>C++可以说是我内心的阴影，之所以是内心的阴影，倒不是C++的语言本身使我无法理解，或不喜欢C++的某些特性。相反我一直对C++怀有很高的敬意。之所以说C++是我的阴影，主要是因为C++的工具链实在是太长太杂了。我不介意多花点时间来学习C++的语言特性，但是我实在不想浪费时间在工具的学习上面。我屡屡在尝试用C++做点东西的时候，都被环境的配置而感到厌烦而放弃。</p><p>最近，感觉 <a href="https://github.com/ocornut/imgui" target="_blank" rel="noopener">Dear ImGui</a> 这个项目有点意思，可以用来做点有趣的事情。于是我想再次挑战一下C++的项目，顺便看看社区是否有新的构建工具出来简化我的工作。</p><p>此前的工具 Make 缺点是项目越大越复杂，需要学习很多东西。还有 autotools , scons，也有一定学习成本。</p><p>最近出现的 google的Bazel、facebook的Buck 两个build system都可以用来构建C++。看了些对比主要缺点是对原有的生态兼容性比较差，往往需要源码导入。</p><p>可以选择的有CMake和Meson。目前看来是比较合适的选择，我决定有空尝试一下meson。</p><p>找到两个template项目 <a href="https://github.com/tiernemi/meson-sample-project" target="_blank" rel="noopener">meson-sample-project</a>  、 <a href="https://github.com/kigster/cmake-project-template" target="_blank" rel="noopener">cmake-project-template</a> 。拿这个模板直接改一改就可以创建一个c++项目了，这样我内心的恐惧感减少了很多。 </p><p>— 2021-01-26 更新 —<br>最终我选择了 <a href="https://github.com/kigster/cmake-project-template" target="_blank" rel="noopener">cmake-project-template</a> 来作为当前的C++<br>项目模板。今天github的发现页给我推荐了<a href="https://github.com/lefticus/cpp_starter_project" target="_blank" rel="noopener">cpp_starter_project</a> ，还能直接使用 github 的 use this template 功能，貌似不错，下次试试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近日，又对C++产生了兴趣。&lt;/p&gt;
&lt;p&gt;C++可以说是我内心的阴影，之所以是内心的阴影，倒不是C++的语言本身使我无法理解，或不喜欢C++的某些特性。相反我一直对C++怀有很高的敬意。之所以说C++是我的阴影，主要是因为C++的工具链实在是太长太杂了。我不介意多花点时间
      
    
    </summary>
    
    
      <category term="cpp" scheme="http://guileen.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>2020回顾：天命</title>
    <link href="http://guileen.github.io/2020/12/31/2020-review/"/>
    <id>http://guileen.github.io/2020/12/31/2020-review/</id>
    <published>2020-12-31T08:11:33.000Z</published>
    <updated>2021-01-04T03:54:32.599Z</updated>
    
    <content type="html"><![CDATA[<p>书曰：恃德者昌，恃力者亡。天命无常，惟德是辅。当世界将要发生巨变，天道自然似乎并不会静观其变，而是会用寒流瘟疫、水旱蝗震来助力一把，莫非这就是传说中的天人感应？不仅如此，还会有荧惑星降世化为儿童，作童谣警示世人。去年的标题是『新思潮的前夜』，并写道『我们正站在世界巨变的前夜，这个巨变将以我们意想不到的方式出现』。2020实在太精彩了，我今天立一个flag，2021会比2020更精彩！</p><hr><p>个人记录：<br>春节后收尾项目，解散团队。<br>知乎写了几个回答。<br>求职，不知是否因为新冠影响颇不顺利，直至4月底找到工作。<br>19年底学习强化学习，玩无限版2048，做机器人。<br>10/10/6 作息，微信『听』书。<br>文革史相关数本（戚回忆，巨人的背影尤佳），西方哲学相关，政治思想（左右派的起源）、历史类（五万年中国简史）、人类学等。十五讲系列、大师小书、王德峰bilibili演讲。《临高启明》2刷并追更。《齐天大圣传》、《丰乳肥臀》、《日光流年》。《太上章》在听。<br>精读并评注：《论语批注》《道德经》《黄帝阴符经》，《周易》在读。</p><p>娃：番茄钟积累奖励玩游戏，效果很好。C++、刷leetcode，加入大佬群，读《算法导论》，参加信息学竞赛。读《古文观止》《论语批注》。学习高中数学，数论概率、微积分等。成果：CCF入门级第二轮一等，CCF提高级第二轮三等。理解了微积分，求导、求积分很熟练了。对古文兴趣依然不大。娃的进步比我大，简直是大踏步的前进。</p><p>娃和我说学校里流传一首儿歌：</p><blockquote><p>早安，打工人！打工人，打工魂，打工都是人上人！没有完不成的任务，只有勇敢的打工人！只要我们努力，我们的老板很快就能拥有更好的明天！我们要悄悄的打工，然后让老板惊艳所有人！感觉冷吗？冷就对了！电热毯是留给有钱的人的！感觉热吗？热就对了！空调是留给有车的人的！不要擦干眼泪，因为这样骑电动车很危险！早安！打工人！</p></blockquote><p>孔颖达在[春秋正义]亦指出:</p><blockquote><p><strong>儿童不解自为文辞,而群聚集会,成此嬉游遨戏之言,其言韵而有理,似若有神凭之者……故书传时有采之者。</strong></p></blockquote><p>我和儿子解释亢龙有悔，讲解物极必反的道理。儿子问我，马云是不是亢龙有悔？孩童可能只是无心之问，我竟不能回答。不久之后马云在陆家嘴金融论坛演讲，批评中国的银行是当铺思维，批评中国的金融监管制度。抖音评论区一片叫好之声，马云颇有为民请命，指点江山之意，可谓意气风发。然后马云就被二次约谈，蚂蚁金服上市暂缓，被要求整改。国家又出手反击垄断，阿里巴巴首当其冲。网络舆论又为之一转，虽然仍然可见为马云歌功颂德者，但总体上已呈现人人痛打落水狗之势。众人皆曰，马云去年说996是福报，今年之反垄断，马云之福报也。马云总欲成为青年人的精神导师，却终被人道破其欺世盗名的骗子本质，真是世事难料。不知马云是否有亢龙有悔之感，财富的损失倒是其次，如联想之柳传志，一度被人视为英雄，如今被人视若贼寇，其精神打击已非财富可以弥补。这类人一生信奉财富即正义，自视甚高，如今跌落神坛，无异于信仰崩塌，其心情可想而知。</p><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>医疗系统若要改革无疑牵扯太多利益集团，而疫情的出现简直如同神助，这是坏事，但也是好事。不仅仅是医疗系统，各个行业都有了调整或监管的动力和契机。</p><p>除医疗外，文艺、教育、科研各个领域都会开始整改，清理改革开放以来的遗毒。年末琼瑶等作家编剧联名要求郭敬明、于正两人道歉，国家出台教育惩戒、未成年人刑责年龄下调，职称评定北京推出了新的办法。明年这些领域都将进一步改革。</p><p>劳工阶层的利益将受到更多的重视，打工人的童谣是劳工阶层觉醒的信号。</p><p>RCEP的意义：不在于贸易，而在于人民币国际化的扩张。</p><p>中欧投资协议的意义：中欧投资协议的意义不在于投资和协议，而在于『人民币与欧元联手绞杀美元』。中国在中东的存在感将会增加！中东将爆发新的代理人战争，以反击美国在中东的影响，扩大人民币石油的结算份额。这种冲突甚至可能演变为冲突方的直接战争。</p><p>法德等国的价值观与英美的价值观区别其实很大的。中欧价值观将会产生碰撞融合，而昂撒民族的价值观将遭到唾弃。一切依附于昂撒价值体系之上的势力和个人都将如沉船上的耗子一样，上窜下跳但无可奈何。澳大利亚将首当其冲，乌合麒麟的事件、中国对澳大利亚的经济制裁仅仅是一个开始。最终的目标是要改变澳大利亚的政治结构，甚至不惜一战。中东、台湾、澳大利亚，三地之中必有一个地方发生军事冲突，很有可能在两个地方发生冲突。</p><p>中国劳工阶层的日子会逐渐好过点，这是中欧合作的必然结果。因为欧洲人不能容忍中国继续使用『低人权』的『优势』与欧洲的高福利竞争，那样欧洲商品很难和中国制造相竞争。而改善中国人民的生活质量也是党内毛派的诉求，而提振内需也符合那些右派经济学家们的理论，于是改善福利肯定会逐步强化。对于996之类的工作制度，可能会有一场疾风骤雨式的治理。小企业主的日子会非常难过，因为他们长期都是靠低人权优势在竞争的。小企业主若不依赖低人权，则会被大企业碾压，则大量小企业破产，造成大量失业。于是反垄断以及逼迫大企业改善福利，就势在必行了。哪怕是为了解决生育问题，也不得不提高人民福利了。步骤应是反垄断开局，民营的大企业要改组要做好福利示范，国企则要减负（之前所谓国企缺乏竞争力是因为国企承担了较多社会福利的职能）。</p><p>过去的几十年，市场换技术，可以说是彻底失败的。市场丢了，技术没换来什么，倒是培养了一大批买办阶级。这些人美其名曰企业家，实则不过是窃贼和骗子，赚的都是底层人的血汗钱。于真正的创新是无甚贡献的。私有制、市场经济仍将长期存在，但下一阶段只有真正的创新者、开拓者才会名利双收。文艺界也需要更多刘慈欣、吴京这样的人，接下来的时代更需要一些执着的『傻子』，而不需要『精明』的商人。郭敬明、于正的道歉只是清理文艺界的开始，湖南台为代表的一套玩法，都要慢慢改变。</p><p>全球治理也需要加强，主要是设法打击国际避税，这个几年之内难有大的进展。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书曰：恃德者昌，恃力者亡。天命无常，惟德是辅。当世界将要发生巨变，天道自然似乎并不会静观其变，而是会用寒流瘟疫、水旱蝗震来助力一把，莫非这就是传说中的天人感应？不仅如此，还会有荧惑星降世化为儿童，作童谣警示世人。去年的标题是『新思潮的前夜』，并写道『我们正站在世界巨变的前夜
      
    
    </summary>
    
      <category term="随笔" scheme="http://guileen.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>iptables从入门到放弃(设置NAT)</title>
    <link href="http://guileen.github.io/2020/12/22/iptables/"/>
    <id>http://guileen.github.io/2020/12/22/iptables/</id>
    <published>2020-12-22T13:01:52.000Z</published>
    <updated>2020-12-22T13:01:52.967Z</updated>
    
    <content type="html"><![CDATA[<p>iptables 的工作流程</p><p><img src="/img/iptables/iptables-1.jpeg" alt="iptables flow"></p><p>数据包在不同层间的时序</p><p><img src="/img/iptables/netpacketflow.svg" alt="packet flow"></p><p>基本语法：iptables [-t 表] [操作命令] [链][规则匹配器][-j 目标动作]</p><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><table><thead><tr><th>表名</th><th>说明</th><th>支持的链</th></tr></thead><tbody><tr><td>filter</td><td>默认。用于过滤。</td><td>INPUT、FORWARD、OUTPUT</td></tr><tr><td>nat</td><td>用于地址转换</td><td>PREROUTING，INPUT，OUTPUT，POSTROUTING</td></tr><tr><td>mangle</td><td>用于修改包</td><td>PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING</td></tr><tr><td>raw</td><td>主要用于让iptables不再跟踪包以提高性能</td><td>PREROUTING，OUTPUT</td></tr><tr><td>security</td><td>用于MAC地址相关的控制</td><td>INPUT、FORWARD、OUTPUT</td></tr></tbody></table><table><thead><tr><th>常用操作命令</th><th>说明</th></tr></thead><tbody><tr><td>-A</td><td>在指定链尾部添加规则</td></tr><tr><td>-D</td><td>删除匹配的规则</td></tr><tr><td>-R</td><td>替换匹配的规则</td></tr><tr><td>-I</td><td>在指定位置插入规则例：iptables -I INPUT 1 –dport 80 -j ACCEPT（将规则插入到filter表INPUT链中的第一位上）</td></tr><tr><td>-L/S</td><td>列出指定链或所有链的规则</td></tr><tr><td>-F</td><td>删除指定链或所有链的规则</td></tr><tr><td>-N</td><td>创建用户自定义链例：iptables -N allowed</td></tr><tr><td>-X</td><td>删除指定的用户自定义链</td></tr><tr><td>-P</td><td>为指定链设置默认规则策略，对自定义链不起作用例：iptables -P OUTPUT DROP</td></tr><tr><td>-Z</td><td>将指定链或所有链的计数器清零</td></tr><tr><td>-E</td><td>更改自定义链的名称例：iptables -E allowed disallowed</td></tr><tr><td>-n</td><td>ip地址和端口号以数字方式显示例：iptables -Ln</td></tr></tbody></table><table><thead><tr><th>常见规则匹配器</th><th>说明</th></tr></thead><tbody><tr><td>-p tcp|udp|icmp|all</td><td>匹配协议，all会匹配所有协议</td></tr><tr><td>-s addr[/mask]</td><td>匹配源地址</td></tr><tr><td>-d addr[/mask]</td><td>匹配目标地址</td></tr><tr><td>–sport port1[:port2]</td><td>匹配源端口(可指定连续的端口）</td></tr><tr><td>–dport port1[:port2]</td><td>匹配目的端口(可指定连续的端口）</td></tr><tr><td>-o interface</td><td>匹配出口网卡，只适用FORWARD、POSTROUTING、OUTPUT。例：iptables -A FORWARD -o eth0</td></tr><tr><td>-i interface</td><td>匹配入口网卡，只使用PREROUTING、INPUT、FORWARD。</td></tr><tr><td>–icmp-type</td><td>匹配icmp类型（使用iptables -p icmp -h可查看可用的ICMP类型）</td></tr><tr><td>–tcp-flags mask comp</td><td>匹配TCP标记，mask表示检查范围，comp表示匹配mask中的哪些标记。例：iptables -A FORWARD -p tcp –tcp-flags ALL SYN，ACK -j ACCEPT（表示匹配SYN和ACK标记的数据包）</td></tr></tbody></table><table><thead><tr><th>目标动作</th><th>说明</th></tr></thead><tbody><tr><td>ACCEPT</td><td>允许数据包通过</td></tr><tr><td>DROP</td><td>丢弃数据包</td></tr><tr><td>REJECT</td><td>丢弃数据包，并且将拒绝信息发送给发送方</td></tr><tr><td>SNAT</td><td>源地址转换（在nat表上）例：iptables -t nat -A POSTROUTING -d 192.168.0.102 -j SNAT –to 192.168.0.1</td></tr><tr><td>DNAT</td><td>目标地址转换（在nat表上）例：iptables -t nat -A PREROUTING -d 202.202.202.2 -j DNAT –to-destination 192.168.0.102</td></tr><tr><td>REDIRECT</td><td>目标端口转换（在nat表上）例：iptables -t nat -D PREROUTING -p tcp –dport 8080 -i eth2.2 -j REDIRECT –to 80</td></tr><tr><td>MARK</td><td>将数据包打上标记例：iptables -t mangle -A PREROUTING -s 192.168.1.3 -j MARK –set-mark 60</td></tr></tbody></table><p>注意要点：</p><p>  1、目标地址转换一般在PREROUTING链上操作</p><p>  2、源地址转换一般在POSTROUTING链上操作</p><p><strong>保存和恢复iptables规则</strong></p><p>  使用iptables-save可以保存到特定文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-save &gt; &#x2F;etc&#x2F;sysconfig&#x2F;iptables_save</span><br></pre></td></tr></table></figure><p>  使用iptables-restore可以恢复规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-restore&lt; &#x2F;etc&#x2F;sysconfig&#x2F;iptables_save</span><br></pre></td></tr></table></figure><h3 id="配置VPN-NAT"><a href="#配置VPN-NAT" class="headerlink" title="配置VPN NAT"></a>配置VPN NAT</h3><p><strong>/etc/sysctl.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward&#x3D;1</span><br></pre></td></tr></table></figure><p>重启网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></table></figure><h3 id="同端口-端口转发"><a href="#同端口-端口转发" class="headerlink" title="同端口 端口转发"></a>同端口 端口转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport [本地端口] -j DNAT --to-destination [目标IP:目标端口]</span><br><span class="line">iptables -t nat -A PREROUTING -p udp --dport [本地端口] -j DNAT --to-destination [目标IP:目标端口]</span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -d [目标IP] --dport [目标端口] -j SNAT --to-source [本地服务器主网卡绑定IP]</span><br><span class="line">iptables -t nat -A POSTROUTING -p udp -d [目标IP] --dport [目标端口] -j SNAT --to-source [本地服务器主网卡绑定IP]</span><br></pre></td></tr></table></figure><hr><p>以下示例，假设你的国外服务器（被中转服务器）是<code>1.1.1.1</code>，你的SS端口是<code>10000</code>，而你这台正在操作的VPS的主网卡绑定IP（中转服务器）是<code>2.2.2.2</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp -m tcp --dport 10000 -j DNAT --to-destination 1.1.1.1:10000</span><br><span class="line">iptables -t nat -A PREROUTING -p udp -m udp --dport 10000 -j DNAT --to-destination 1.1.1.1:10000</span><br><span class="line">iptables -t nat -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 10000 -j SNAT --to-source 2.2.2.2</span><br><span class="line">iptables -t nat -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 10000 -j SNAT --to-source 2.2.2.2</span><br></pre></td></tr></table></figure><h3 id="不同端口-端口转发"><a href="#不同端口-端口转发" class="headerlink" title="不同端口 端口转发"></a><strong>不同端口</strong> 端口转发</h3><p>将<strong>本地服务器(中转服务器<code>2.2.2.2</code>)</strong>的<code>10000~20000</code>端口转发至<strong>目标IP(被中转服务器)</strong>为<code>1.1.1.1</code>的<code>30000~40000</code>端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp -m tcp --dport 10000:20000 -j DNAT --to-destination 1.1.1.1:30000-40000</span><br><span class="line">iptables -t nat -A PREROUTING -p udp -m udp --dport 10000:20000 -j DNAT --to-destination 1.1.1.1:30000-40000</span><br><span class="line">iptables -t nat -A POSTROUTING -d 1.1.1.1 -p tcp -m tcp --dport 30000:40000 -j SNAT --to-source 2.2.2.2</span><br><span class="line">iptables -t nat -A POSTROUTING -d 1.1.1.1 -p udp -m udp --dport 30000:40000 -j SNAT --to-source 2.2.2.2</span><br></pre></td></tr></table></figure><h2 id="以上尝试以失败告终，最终采用了brook"><a href="#以上尝试以失败告终，最终采用了brook" class="headerlink" title="以上尝试以失败告终，最终采用了brook"></a>以上尝试以失败告终，最终采用了brook</h2><p><a href="https://github.com/txthinking/brook" target="_blank" rel="noopener">brook</a> 非常强大，不仅能作中继，还可以在手机上安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup brook relay -f :4500 -t 1.2.3.4:4500 &amp;</span><br><span class="line">nohup brook relay -f :500 -t 1.2.3.4:500 &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iptables 的工作流程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/iptables/iptables-1.jpeg&quot; alt=&quot;iptables flow&quot;&gt;&lt;/p&gt;
&lt;p&gt;数据包在不同层间的时序&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/iptables/net
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>脚本控制Mac通知栏</title>
    <link href="http://guileen.github.io/2020/12/22/bitbar/"/>
    <id>http://guileen.github.io/2020/12/22/bitbar/</id>
    <published>2020-12-22T10:02:06.000Z</published>
    <updated>2020-12-22T10:13:24.151Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/matryer/bitbar" target="_blank" rel="noopener">bitbar</a> 可以让你使用任何脚本来控制Mac的菜单栏。你只需要写一个向控制台输出的脚本即可。使你在菜单栏可以轻松的切换ssh tunnel，显示BTC价格等。只需要将脚本放置在 bitbar plugin 目录中，文件名中可指定刷新频率。如：<a href="https://github.com/matryer/bitbar-plugins/blob/master/Network/ssh-tunnel.1s.sh" target="_blank" rel="noopener">ssh-tunnel.1s.sh</a></p><p>编辑 ssh config 包含 DynamicForward 的配置，将自动出现在菜单中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host gz</span><br><span class="line">        HostName your_jump_ip</span><br><span class="line">        User ubuntu</span><br><span class="line"></span><br><span class="line">Host gzhk</span><br><span class="line">        HostName your_final_ip</span><br><span class="line">        User ubuntu</span><br><span class="line">        Port 22</span><br><span class="line">        Compression yes</span><br><span class="line">        DynamicForward 10088</span><br><span class="line">        ProxyJump gz</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/matryer/bitbar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bitbar&lt;/a&gt; 可以让你使用任何脚本来控制Mac的菜单栏。你只需要写一个向控制台输出的脚本即可。使你在菜单栏可以轻松的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>替代图</title>
    <link href="http://guileen.github.io/2020/12/18/image-replacer/"/>
    <id>http://guileen.github.io/2020/12/18/image-replacer/</id>
    <published>2020-12-18T07:39:30.000Z</published>
    <updated>2020-12-18T07:40:06.766Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://picsum.photos/" target="_blank" rel="noopener">https://picsum.photos/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://picsum.photos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://picsum.photos/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 16 安装 IKEV2 VPN SERVER</title>
    <link href="http://guileen.github.io/2020/12/18/setup-ikev2-vpn-server-on-ubuntu-16-04/"/>
    <id>http://guileen.github.io/2020/12/18/setup-ikev2-vpn-server-on-ubuntu-16-04/</id>
    <published>2020-12-18T02:50:16.000Z</published>
    <updated>2020-12-22T13:01:28.720Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-ikev2-vpn-server-with-strongswan-on-ubuntu-16-04" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-set-up-an-ikev2-vpn-server-with-strongswan-on-ubuntu-16-04</a></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>注意替换 server_name_or_ip 为服务器地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install strongswan strongswan-plugin-eap-mschapv2 moreutils iptables-persistent</span><br><span class="line"></span><br><span class="line">mkdir vpn-certs</span><br><span class="line">cd vpn-certs</span><br><span class="line"></span><br><span class="line">ipsec pki --gen --type rsa --size 4096 --outform pem &gt; server-root-key.pem</span><br><span class="line">chmod 600 server-root-key.pem</span><br><span class="line">ipsec pki --self --ca --lifetime 3650 \</span><br><span class="line">--in server-root-key.pem \</span><br><span class="line">--type rsa --dn &quot;C&#x3D;US, O&#x3D;VPN Server, CN&#x3D;VPN Server Root CA&quot; \</span><br><span class="line">--outform pem &gt; server-root-ca.pem</span><br><span class="line"></span><br><span class="line">ipsec pki --gen --type rsa --size 4096 --outform pem &gt; vpn-server-key.pem</span><br><span class="line"></span><br><span class="line">ipsec pki --pub --in vpn-server-key.pem \</span><br><span class="line">--type rsa | ipsec pki --issue --lifetime 1825 \</span><br><span class="line">--cacert server-root-ca.pem \</span><br><span class="line">--cakey server-root-key.pem \</span><br><span class="line">--dn &quot;C&#x3D;US, O&#x3D;VPN Server, CN&#x3D;server_name_or_ip&quot; \</span><br><span class="line">--san server_name_or_ip \</span><br><span class="line">--flag serverAuth --flag ikeIntermediate \</span><br><span class="line">--outform pem &gt; vpn-server-cert.pem</span><br><span class="line"></span><br><span class="line">sudo cp .&#x2F;vpn-server-cert.pem &#x2F;etc&#x2F;ipsec.d&#x2F;certs&#x2F;vpn-server-cert.pem</span><br><span class="line">sudo cp .&#x2F;vpn-server-key.pem &#x2F;etc&#x2F;ipsec.d&#x2F;private&#x2F;vpn-server-key.pem</span><br><span class="line"></span><br><span class="line">sudo chown root &#x2F;etc&#x2F;ipsec.d&#x2F;private&#x2F;vpn-server-key.pem</span><br><span class="line">sudo chgrp root &#x2F;etc&#x2F;ipsec.d&#x2F;private&#x2F;vpn-server-key.pem</span><br><span class="line">sudo chmod 600 &#x2F;etc&#x2F;ipsec.d&#x2F;private&#x2F;vpn-server-key.pem</span><br><span class="line"></span><br><span class="line">sudo cp &#x2F;etc&#x2F;ipsec.conf &#x2F;etc&#x2F;ipsec.conf.original</span><br><span class="line">echo &#39;&#39; | sudo tee &#x2F;etc&#x2F;ipsec.conf</span><br><span class="line"></span><br><span class="line">sudo vim &#x2F;etc&#x2F;ipsec.conf</span><br></pre></td></tr></table></figure><h3 id="etc-ipsec-conf"><a href="#etc-ipsec-conf" class="headerlink" title="/etc/ipsec.conf"></a>/etc/ipsec.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">config setup</span><br><span class="line">    charondebug&#x3D;&quot;ike 1, knl 1, cfg 0&quot;</span><br><span class="line">    uniqueids&#x3D;no</span><br><span class="line"></span><br><span class="line">conn ikev2-vpn</span><br><span class="line">    auto&#x3D;add</span><br><span class="line">    compress&#x3D;no</span><br><span class="line">    type&#x3D;tunnel</span><br><span class="line">    keyexchange&#x3D;ikev2</span><br><span class="line">    fragmentation&#x3D;yes</span><br><span class="line">    forceencaps&#x3D;yes</span><br><span class="line">    ike&#x3D;aes256-sha1-modp1024,3des-sha1-modp1024!</span><br><span class="line">    esp&#x3D;aes256-sha1,3des-sha1!</span><br><span class="line">    dpdaction&#x3D;clear</span><br><span class="line">    dpddelay&#x3D;300s</span><br><span class="line">    rekey&#x3D;no</span><br><span class="line">    left&#x3D;%any</span><br><span class="line">    leftid&#x3D;@server_name_or_ip</span><br><span class="line">    leftcert&#x3D;&#x2F;etc&#x2F;ipsec.d&#x2F;certs&#x2F;vpn-server-cert.pem</span><br><span class="line">    leftsendcert&#x3D;always</span><br><span class="line">    leftsubnet&#x3D;0.0.0.0&#x2F;0</span><br><span class="line">    right&#x3D;%any</span><br><span class="line">    rightid&#x3D;%any</span><br><span class="line">    rightauth&#x3D;eap-mschapv2</span><br><span class="line">    rightdns&#x3D;8.8.8.8,8.8.4.4</span><br><span class="line">    rightsourceip&#x3D;10.10.10.0&#x2F;24</span><br><span class="line">    rightsendcert&#x3D;never</span><br><span class="line">    eap_identity&#x3D;%identity</span><br></pre></td></tr></table></figure><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><p>可选</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw disable</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line">iptables -F</span><br><span class="line">iptables -Z</span><br></pre></td></tr></table></figure><p>默认保持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">sudo iptables -A INPUT -i lo -j ACCEPT</span><br></pre></td></tr></table></figure><p>VPN端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -p udp --dport  500 -j ACCEPT</span><br><span class="line">sudo iptables -A INPUT -p udp --dport 4500 -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD --match policy --pol ipsec --dir in  --proto esp -s 10.10.10.10&#x2F;24 -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD --match policy --pol ipsec --dir out --proto esp -d 10.10.10.10&#x2F;24 -j ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s 10.10.10.10&#x2F;24 -o eth0 -m policy --pol ipsec --dir out -j ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s 10.10.10.10&#x2F;24 -o eth0 -j MASQUERADE</span><br><span class="line">sudo iptables -t mangle -A FORWARD --match policy --pol ipsec --dir in -s 10.10.10.10&#x2F;24 -o eth0 -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss 1361:1536 -j TCPMSS --set-mss 1360</span><br></pre></td></tr></table></figure><p>可选，禁用其他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT -j DROP</span><br><span class="line">sudo iptables -A FORWARD -j DROP</span><br></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo netfilter-persistent save</span><br><span class="line">sudo netfilter-persistent reload</span><br></pre></td></tr></table></figure><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>sudo vim /etc/sysctl.conf</p><h3 id="etc-sysctl-conf"><a href="#etc-sysctl-conf" class="headerlink" title="/etc/sysctl.conf"></a>/etc/sysctl.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">. . .</span><br><span class="line"></span><br><span class="line"># Uncomment the next line to enable packet forwarding for IPv4</span><br><span class="line">net.ipv4.ip_forward&#x3D;1</span><br><span class="line"></span><br><span class="line">. . .</span><br><span class="line"></span><br><span class="line"># Do not accept ICMP redirects (prevent MITM attacks)</span><br><span class="line">net.ipv4.conf.all.accept_redirects &#x3D; 0</span><br><span class="line"># Do not send ICMP redirects (we are not a router)</span><br><span class="line">net.ipv4.conf.all.send_redirects &#x3D; 0</span><br><span class="line"></span><br><span class="line">. . .</span><br><span class="line"></span><br><span class="line">net.ipv4.ip_no_pmtu_disc &#x3D; 1</span><br></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p><code>sudo reboot</code></p><h2 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h2><p><code>scp hk:~/vpn-certs/server-root-ca.pem ./</code></p><p>安装并信任证书，测试</p><h2 id="Relay-server"><a href="#Relay-server" class="headerlink" title="Relay server"></a>Relay server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brook relay -f :500 -t 1.2.3.4:500 &amp;</span><br><span class="line">brook relay -f :4500 -t 1.2.3.4:4500 &amp;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-an-ikev2-vpn-server-with-strongswan-on-ubuntu-16-04&quot; target=&quot;_bla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在命令行解析HTML</title>
    <link href="http://guileen.github.io/2020/12/14/parse-html-in-command-line/"/>
    <id>http://guileen.github.io/2020/12/14/parse-html-in-command-line/</id>
    <published>2020-12-14T09:02:32.000Z</published>
    <updated>2020-12-14T09:44:16.415Z</updated>
    
    <content type="html"><![CDATA[<p>最近要做音乐app，但没有素材。 一个音乐爬虫</p><p><a href="https://github.com/BeanWei/MusicSpider" target="_blank" rel="noopener">https://github.com/BeanWei/MusicSpider</a></p><p>网页版的内容比较容易解析，为了快速了解数据结构，需要一个好工具。于是找到了pup</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com&#x2F;ericchiang&#x2F;pup</span><br><span class="line"></span><br><span class="line">curl -s https:&#x2F;&#x2F;news.ycombinator.com&#x2F; | pup &#39;table table tr:nth-last-of-type(n+2) td.title a json&#123;&#125;&#39;</span><br></pre></td></tr></table></figure><p>以上解析可以用于命令行的分析，但若要生成更精简的数据结构，可以用下面的结构。</p><p>const { parse } = require(‘node-html-parser’)<br>const fs = require(‘fs’)</p><p>var dom = parse(fs.readFileSync(“./test_list.xml”, “utf8”))<br>var res = dom.querySelectorAll(‘li’).map(el=&gt; {<br>     return {<br>         src: el.querySelector(“img”).getAttribute(“src”),<br>         title: el.querySelector(“a.tit”).innerText,<br>         href: el.querySelector(“a.tit”).getAttribute(“href”),<br>         cnt: el.querySelector(“span.nb”).innerText,<br>     }<br> })<br>console.log(JSON.stringify(res,null,’  ‘))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近要做音乐app，但没有素材。 一个音乐爬虫&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/BeanWei/MusicSpider&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/BeanWei
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>太初有道</title>
    <link href="http://guileen.github.io/2020/10/29/tao-at-the-very-begining/"/>
    <id>http://guileen.github.io/2020/10/29/tao-at-the-very-begining/</id>
    <published>2020-10-29T07:30:57.000Z</published>
    <updated>2020-10-29T07:30:57.402Z</updated>
    
    <content type="html"><![CDATA[<p>人类在数万年前进入了一个新的状态，太初之人，完满自足，而后散布天下。</p><p>庄子天下篇说，上古之人真是完备啊，可惜后世的人很不幸，他们将看到道术在天下分裂。</p><p>古希腊哲学、古印度思想、中国古代思想，有一个更统一的源头。那就是上古太初之人。</p><p>我们今天的思想是东西方思想的结合，依然不够完满，缺失了重要的部分。</p><p>美洲文化受到了破坏。非洲有一部分上古文化留存，苗瑶族也有一些上古之道留存。但都不完整。</p><p>我们的目标应该是恢复一个人类上古之道，而不是自称独立发展的，自绝于世界。</p><p>也不是盲目的学习他人，放弃自己，因为他人也不过是缺憾的存在。</p><p>人类无论从基因上，还是从思想上，都是残缺的。</p><p>我们需要追求圆满自足，这是人所遗忘的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人类在数万年前进入了一个新的状态，太初之人，完满自足，而后散布天下。&lt;/p&gt;
&lt;p&gt;庄子天下篇说，上古之人真是完备啊，可惜后世的人很不幸，他们将看到道术在天下分裂。&lt;/p&gt;
&lt;p&gt;古希腊哲学、古印度思想、中国古代思想，有一个更统一的源头。那就是上古太初之人。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ip转换为地理位置</title>
    <link href="http://guileen.github.io/2020/10/20/ip-to-location/"/>
    <id>http://guileen.github.io/2020/10/20/ip-to-location/</id>
    <published>2020-10-20T08:30:02.000Z</published>
    <updated>2020-10-20T08:30:02.521Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装windows xp虚拟机，安装guest addition</li><li>添加share folder</li><li>安装纯真数据库: <a href="http://www.cz88.net/fox/ipdat.shtml" target="_blank" rel="noopener">http://www.cz88.net/fox/ipdat.shtml</a></li><li>解压到share folder</li><li>mac上使用 iconv -f GBK -t UTF-8 ipdata.txt &gt; ipdata-utf8.txt</li><li>上传到github</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装windows xp虚拟机，安装guest addition&lt;/li&gt;
&lt;li&gt;添加share folder&lt;/li&gt;
&lt;li&gt;安装纯真数据库: &lt;a href=&quot;http://www.cz88.net/fox/ipdat.shtml&quot; target=&quot;_b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>强化学习在长时间运行系统中的限制</title>
    <link href="http://guileen.github.io/2020/04/05/limitation-of-rl-in-long-term/"/>
    <id>http://guileen.github.io/2020/04/05/limitation-of-rl-in-long-term/</id>
    <published>2020-04-04T16:43:34.000Z</published>
    <updated>2020-08-31T07:01:49.034Z</updated>
    
    <content type="html"><![CDATA[<p>近日尝试使用强化学习解决8x8大小的2048游戏。游戏环境是一个8x8的方格，环境每回合随机生成2个方块，方块的值为2或4，AI的决策空间是上、下、左、右四个操作，所有方块都将向所指示的方向堆叠，如果两个相邻的值相同方块在堆叠方向挤压，则这两个方块合并为1个方块，值是两个方块值的和。如果任何方向都无法移动方块，则游戏结束。游戏的目标是尽可能久的玩下去，合并出最大的方块。</p><p>最初我尝试用PG来训练这个看似简单的游戏。每一步，都视为1点奖励，如果失败则给予-1000惩罚。算法很快习得了一个偷懒的方法，每一步都进行无效的移动，以此来苟延残喘。于是将无效的移动操作，视为重大的失误，也同样给予-1000的惩罚。算法很快学会了在一个局面下的有效移动操作。但这个游戏，哪怕只是随机的移动也能够取得一个普通的结果，如果要突破极限，则需要使用一些特殊的策略，我期待算法是否能在训练中学会这些策略。</p><p><img src="/img/2048/pg.gif" alt="初次训练，类似随机运动"></p><p>对于这个游戏，达到2048，需要大约500次移动，达到4096，则需要1000，达到1M，也就大约需要20多万次移动，达到4M，则需要上百万次移动。每到达一个新的难度，面临的局面都不同，之前所习得的经验就不一定继续有效了。2048游戏是一个比围棋要简单很多的游戏，围棋拥有更多的选点，2048只有4个操作选择。他们的主要区别在于围棋一般在100多手内结束，而2048的游戏时间则近乎无限长。理想的游戏结果如下图所示：</p><p><img src="/img/2048/perfect.png" alt=""></p><p>这一游戏是存在理想玩法的，经过很多局的游戏，我已总结出一些经验。但是这些经验是感性的，很难使用逻辑规则表达出来，很多时候是凭直觉的。我手段操作达到了512K的结果，虽然我依然可以挑战更高的游戏记录，但显然我不能将如此多的时间浪费在滑动手指上。这也是我要编程解决这个问题的初衷，但是强化学习算法，只能在一次次的失败中得到教训，可是这个游戏的特点是，训练的越好，游戏时间越长，获得失败经验的成本就越大。所以无论该算法在理论上是多么的正确，但在实际操作过程中已经变得不可行了。</p><p>DQN、PG等强化学习算法的基本过程是根据系统给予的奖励，努力最大化收益。但是对于一个没有明确获胜终点的系统，如果验证训练结果的有效性却是一个非常大的问题。由于强化学习本质上是通过过往的经验来调整自己的策略的，如果有明显的获胜路径，则算法可以有充分的胜利经验可供借鉴。但如果目标是永远安全的运行下去，没有获胜的路径，只有失败的惩罚，那么算法只能在有限的教训中得到学习。假设我们正在训练一个自动飞行系统，获取每一个经验教训的成本都非常巨大，强化学习在这一方面的应用，必须要搭配一些人类的理性评估作为辅助，但是将人类的意识转化为可以实施的程序逻辑又是非常复杂的事情。</p><p>如果我们训练的是一个自动驾驶系统呢？在未来无人驾驶会应用的越来越多。无人驾驶的安全性会很快超越人类，随即人们期望可以进一步提升驾驶的平均速度或其他一些智能驾驶的指标。因为无人驾驶的安全性已经超越了人类，所以无法再依赖于人类的驾驶经验给予其帮助，只能依赖于自身驾驶中的经验（尤其是事故）作为训练依据。那么这时这个系统还可能是安全的吗？</p><p>在未来的相关强化学习领域，一个好的环境模拟系统、事故全息信息的采集和共享系统，才是提升人工智能的关键，而不是算法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近日尝试使用强化学习解决8x8大小的2048游戏。游戏环境是一个8x8的方格，环境每回合随机生成2个方块，方块的值为2或4，AI的决策空间是上、下、左、右四个操作，所有方块都将向所指示的方向堆叠，如果两个相邻的值相同方块在堆叠方向挤压，则这两个方块合并为1个方块，值是两个方
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>强化学习简介（六）：策略梯度实例</title>
    <link href="http://guileen.github.io/2020/01/03/introduce-reinforcement-learning-6/"/>
    <id>http://guileen.github.io/2020/01/03/introduce-reinforcement-learning-6/</id>
    <published>2020-01-03T06:40:51.000Z</published>
    <updated>2020-08-31T07:01:49.034Z</updated>
    
    <content type="html"><![CDATA[<p>和第四节DQN的实例一样，我们依然使用CartPole-v1来作为训练环境。策略梯度的网络和DQN的网络结构是类似的，只是在输出层需要做Softmax处理，因为策略梯度的输出本质上是一个分类问题——将某一个状态分类到某一个动作的概率。而DQN网络则是一个回归问题——某一个网络在各个动作的Q值是多少。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolicyNet</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden, outputs)</span>:</span></span><br><span class="line">        super(PolicyNet, self).__init__()</span><br><span class="line">        self.fc1 = nn.Linear(input_size, hidden)</span><br><span class="line">        self.fc2 = nn.Linear(hidden, outputs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = F.relu(F.dropout(self.fc1(x), <span class="number">0.1</span>))</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="comment"># 输出层需要使用softmax</span></span><br><span class="line">        <span class="keyword">return</span> F.softmax(x, dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>不要忘了输出层的SoftMax。</p><h2 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h2><p>相对于DQN，我们也不需要额外的目标网络和参数复制操作，只需要一个策略网络即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BATCH_SIZE = <span class="number">256</span></span><br><span class="line">GAMMA = <span class="number">0.99</span></span><br><span class="line">HIDDEN_SIZE = <span class="number">15</span></span><br><span class="line">LR = <span class="number">0.005</span></span><br><span class="line"></span><br><span class="line">n_actions = env.action_space.n</span><br><span class="line">input_size = env.observation_space.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">policy_net = PolicyNet(input_size, HIDDEN_SIZE, n_actions)</span><br><span class="line">optimizer = optim.Adam(policy_net.parameters(), lr=LR)</span><br><span class="line"></span><br><span class="line">steps_done = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="选择动作"><a href="#选择动作" class="headerlink" title="选择动作"></a>选择动作</h2><p>在选择动作时，我们不再需要特地设置探索概率，因为输出结果就是各个动作的概率分布。我们使用<code>torch.distributions.categorical.Categorical</code> 来进行取样。在每次选择动作时，我们同时记录对应的概率，以便后续使用。这个概率就是 `ln pi_theta(S_t,A_t)`</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">log_probs = []</span><br><span class="line">rewards = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_action</span><span class="params">(state)</span>:</span></span><br><span class="line">    x = torch.unsqueeze(torch.FloatTensor(state),<span class="number">0</span>)</span><br><span class="line">    probs = policy_net(x)</span><br><span class="line">    c = Categorical(probs)</span><br><span class="line">    action = c.sample()</span><br><span class="line">    <span class="comment"># log action probs to plt</span></span><br><span class="line">    prob = c.log_prob(action)</span><br><span class="line">    log_probs.append(prob)</span><br><span class="line">    <span class="keyword">return</span> action</span><br></pre></td></tr></table></figure><h2 id="优化模型"><a href="#优化模型" class="headerlink" title="优化模型"></a>优化模型</h2><p>为了更新参数，我们首先需要计算`v_t`，这在后续参数迭代中需要用到。</p><ul><li>` v_t = r_(t+1) + gamma * v_(t+1) `</li></ul><p>在模拟执行的时候，我们记录了每一步的reward，我们需要计算每一步的`v_t`，其顺序与执行顺序一致。根据公式我们需要倒序的计算`v_t`，然后将计算好的结果倒序排列，就形成了`v_1,v_2…v_t`的序列。最后我们需要将数据标准化。(TODO: 这里可能存在一个序列对应的问题，其中每一个状态的累计收益，是后续状态收益之和，不包含本轮收益)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">values = []</span><br><span class="line">v = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> reward <span class="keyword">in</span> reversed(rewards):</span><br><span class="line">    v = v * GAMMA + reward</span><br><span class="line">    values.insert(<span class="number">0</span>, v)</span><br><span class="line">mean = np.mean(values)</span><br><span class="line">std = np.std(values)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">    values[i] = (values[i] - mean) / std</span><br></pre></td></tr></table></figure><p>接下来我们需要更新参数，参数更新的公式为：</p><ul><li>` theta larr theta + alpha v_t ln pi_theta (A_t|S_t) `</li></ul><p>我们将其转换为损失函数形式:</p><ul><li>` L(theta) = - v_t ln pi_theta(A_t|S_t) `</li></ul><p>这个损失函数的形式可以帮助我们更好的理解策略梯度的原理。如果一个动作价值为负值，但是其选择概率为正，则损失较大。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">loss = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.random.choice(size, n):</span><br><span class="line">    loss.append(- values[i] * log_probs[i])</span><br><span class="line">loss = torch.cat(loss).sum()</span><br><span class="line"></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line">loss.backward()</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> policy_net.parameters():</span><br><span class="line">    param.grad.data.clamp_(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure><h2 id="训练循环"><a href="#训练循环" class="headerlink" title="训练循环"></a>训练循环</h2><p>训练循环需要在一局结束之后进行。并清除rewards、log_probs缓存。对于cartpole-v1环境，要注意他的每一步奖励都是1，很显然在最后一步代表着游戏失败，我们需要施加一定的惩罚，我们将最后一步的奖励设为-100。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">num_episodes = <span class="number">5000</span></span><br><span class="line"><span class="keyword">for</span> i_episode <span class="keyword">in</span> range(num_episodes):</span><br><span class="line">    state = env.reset()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> count():</span><br><span class="line">        action = select_action(state)</span><br><span class="line">        <span class="keyword">if</span> i_episode % <span class="number">2000</span> == <span class="number">0</span>:</span><br><span class="line">            env.render()</span><br><span class="line">        next_state, reward, done,_ = env.step(action.item())</span><br><span class="line">        <span class="keyword">if</span> done:</span><br><span class="line">            reward = <span class="number">-100</span></span><br><span class="line">        rewards.append(reward)</span><br><span class="line">        state = next_state</span><br><span class="line">        <span class="keyword">if</span> done <span class="keyword">or</span> t &gt;= <span class="number">2500</span>:</span><br><span class="line">            optimize_model()</span><br><span class="line">            print(<span class="string">'EP'</span>, i_episode)</span><br><span class="line">            episode_durations.append(t+<span class="number">1</span>)</span><br><span class="line">            plot_durations()</span><br><span class="line">            rewards = []</span><br><span class="line">            log_probs = []</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="/files/cart-pg.png" alt="Clamp"></p><p><a href="/files/demo_dqn.py">完整代码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;和第四节DQN的实例一样，我们依然使用CartPole-v1来作为训练环境。策略梯度的网络和DQN的网络结构是类似的，只是在输出层需要做Softmax处理，因为策略梯度的输出本质上是一个分类问题——将某一个状态分类到某一个动作的概率。而DQN网络则是一个回归问题——某一个网
      
    
    </summary>
    
      <category term="AI" scheme="http://guileen.github.io/categories/AI/"/>
    
    
  </entry>
  
</feed>
